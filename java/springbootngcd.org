* Spring Boot Angular 2 Continuou Delivery Pipeline

In this tutorial we want to set up the spring boot microservices based application from grounds up.

We run the vertical pipelines to setup the required software.

We're skipping some of the details to keep the demo simple and straightforward. For production systems however, it would require all the considerations including more elaborate configuration management, load balancing, data management, observability etc.

I have already provisioned ec2 machine, we can use simple terraform available online and publish the inventory information into consul or any other app.
I will run the setup and install playbook to get out machine ready.

On the top of this we run the horizontal pipeline for dashboard-api and we see the front end is ready for us to use.

Now we run the users api. Then we run the messenger api.

Now we run the zuul proxy.

Our microservices are up and running. Now we go ahead and regist and login to our app.

** Setting up Spring Boot Microservices
*** Authentication API
**** Maven begin project
**** Security
***** Authentication
Authentication Filter  > Authentication Manager
> Authentication Provider > User Details Service > User Details > Authentication
> SecurityContext
***** Authorziation

**** Set up H2 Database
**** Set up User Table
**** Set up Rest API
**** Set up Persistence Model
**** Liquibase Migration


*****  pom.xml
#+BEGIN_SRC xml
		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
		</dependency>
	<dependency>
		<groupId>com.h2database</groupId>
		<artifactId>h2</artifactId>
	</dependency>
#+END_SRC

***** application.properties
#+BEGIN_SRC 
liquibase.changeLog=classpath:liquibase/migrations/db.changelog.xml
liquibase.url=${spring.datasource.url}
liquibase.user=${spring.datasource.username}
liquibase.password=${spring.datasource.password}
liquibase.dropFirst=false
#+END_SRC

***** /src/main/resources/liquibase/migrations/db.changelog.xml
#+BEGIN_SRC xml
<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.0.xsd
        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <include file="liquibase/migrations/db.changelog.0.0.1.xml" />

</databaseChangeLog>
#+END_SRC

***** /src/main/resources/liquibase/migrations/db.changelog.0.0.1.xml
#+BEGIN_SRC xml
<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.0.xsd
        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <changeSet author="amitthk" id="1">
    <sql dbms="h2"
            endDelimiter=";"
            splitStatements="true"
            stripComments="true">
            DROP TABLE USERS IF EXISTS;
	CREATE TABLE USERS (
	ID BIGINT auto_increment PRIMARY KEY,
	USERNAME VARCHAR(255),EMAIL VARCHAR(255),PASSWORDHASH VARCHAR(255),SALT VARCHAR(255), CREATEDATE DATE, LASTLOGIN DATE,LASTUPDATE DATE);
    </sql>
    
	<sql dbms="PostgreSQL"
	            endDelimiter=";"
	            splitStatements="true"
	            stripComments="true">
	CREATE TABLE IF NOT EXISTS USERS (
	ID BIGSERIAL PRIMARY KEY,
	USERNAME VARCHAR(255),
	EMAIL VARCHAR(255),
	PASSWORDHASH VARCHAR(255),
	SALT VARCHAR(255), 
	CREATEDATE DATE, 
	LASTLOGIN DATE,
	LASTUPDATE DATE);
	    </sql>
</changeSet>
    
</databaseChangeLog>
#+END_SRC


**** Mybatis

***** pom.xml
#+BEGIN_SRC xml
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.0</version>
		</dependency><!--$NO-MVN-MAN-VER$-->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.5</version>
		</dependency>
#+END_SRC

***** PersistenceConfiguration
#+BEGIN_SRC xml
public class PersistenceConfiguration {
	@Bean
	@ConfigurationProperties(prefix="spring.datasource")
	@Primary
	public DataSource dataSource() {
		DriverManagerDataSource dataSource = new DriverManagerDataSource();
        return dataSource;
	}
	

    @Bean
    public SqlSessionFactoryBean sqlSessionFactory() throws Exception {
        SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();
        sessionFactory.setDataSource(dataSource());
        sessionFactory.setTypeAliasesPackage("com.amitthk.springbootngcd.domain");
        return sessionFactory;
    }
#+END_SRC
***** Application Properties
#+BEGIN_SRC 
spring.h2.console.enabled=true
spring.h2.console.path=/h2

spring.database.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:file:~/mysbappdb
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.max-active=5
spring.datasource.max-idle=3
spring.datasource.max-wait=10000
spring.datasource.min-evictable-idle-time-millis=1000
spring.datasource.min-idle=8
spring.datasource.time-between-eviction-runs-millis=1
#+END_SRC
***** UserInfoMapper
#+BEGIN_SRC java
public interface UserMapper {
    int deleteByPrimaryKey(Long id);
    Long insert(UserInfo record);
    int insertSelective(UserInfo record);
    UserInfo selectByPrimaryKey(Long id);
    UserInfo selectByEmail(String id);
    List<UserInfo> selectAll();
    int updateByPrimaryKeySelective(UserInfo record);
    int updateByPrimaryKey(UserInfo record);
}
#+END_SRC
Use the XML mappings generated by mybatis-generator

**** Setup JWT token authentication
**** Setup Spring Security
*** Dashboard API
**** Set Up JWT Token Authentication
*** Netï¬‚ix Eureka, ZooKeeper,Consul, Etcd
STS > Cloud Discovery > Eureka Server
Eureka Server, Actuator

@EnableEurekaServer
@SpringBootApplication
...
  

- application.properties

server.port=8991
eureka.client.register-witheureka=false
eureka.client.fetch-registry=false
eureka.datacenter=singapore
eureka.environment=sit

....
- Client: 

  - Maven add dependency Eureka
  - @EnableDiscoveryClient   or @EnableEurekaClient
  - bootstrap.properties
    - spring.application.name=myservice
  - application.properties
    - eureka.client.register-with-eureka=true
    - eureka.client.fetch-registry=true
    - eureka.client.serviceUrl.defaultZone=http://localhost:8991/eureka/
    - eureka.instance.instance-id=${spring.application.name}:${random.int}
    - server.port=0
    - server.instance.hostname=sit

#+BEGIN_SRC 
@LoadBalancer
@Bean
public RestTemplate restTemplate(RestTemplateBuilder builder)
{
returng builder.build();
}

@Autowired
private RestTemplate restTemplate;

ServerInfo si = restTemplate.getForObject("http://myserviceid/serverinfo/"+id);

#+END_SRC

Additional health checks

#+BEGIN_SRC 
public class MyHealthCheck implements HealthIndicator{

public Health health(){
try{
...
return Health.up().build();
}
catch(RuntimeException exc){
  return Health.down().withDetail(exc.getMessage()).build();
}

}
}
#+END_SRC

eureka.client.healthcheck.enabled=true 

*** Zuul Proxy/API Gateway
- Ribbon
  - MyServiceController
    - @RibbonClient(name="myservice")
  - application.properties
    - ribbon.eureka.enabled=false
    - myservice-local.ribbon.listOfServers=http://localhost:8091,...
    - myservice-local.ribbon.MaxAutoRetries=0
    - myservice-local.ribbon.OkToretryOnAllOperations=false
    - myservice-local.ribbon.MaxUtoRetriesNextServer=1
  - application.properties
    - ribbon.eureka.enabled=true
    - #remove above properties they come from eureka
  - Handle in config  @RibbonClient(name="myservice",configuration=Myconfig.class)
    - 
**** Zuul
spring.io  > web , Cloud Routing > Zuul
#+BEGIN_SRC 

@EnableZuulProxy
public class MyApp....

server.port=8080
management.security.enabled=false
spring.application.name=toll-api-proxy

zuul.routes.trproxy.url=http://localhost:89398
zuul.routes.trproxy.path=/rootproxy/**

#Eureka behind proxy
ribbon.eureka.enabled=false
zuul.routes.trproxy.path=/rootproxy/**
zuul.routes.trproxy.serviceId=proxy
proxy.ribbon.listOfServers=http://localhost:89398....

#Come only via proxy
zuul.ignoredServices=*
zuul.routes.trproxy.path=/rootproxy/**
zuul.routes.trproxy.serviceId=my-rootproxy
zuul.ignoredPatterns=/rootproxy/users/1

#start with prefix /url/....
zuul.prefix=url
#+END_SRC

- Pre  filters
- routing filters
- post filters
- error filters

- Filter
  - Type
  - Execution order
  - execution criteria
  - action
- Filter RequestContext
- Fileters can be disabled in properties


#+BEGIN_SRC 
import com.netflix.zuul.ZuulFilter;
import com.netflix.zuul.RequestContext;
import static com.netflix.zuul.context.RequestContext.getCurrentContext; 

public class MyFilter extends ZuulFilter{

@Override
public Object run(){
  System.out.println("filter called");
}

@Override
public boolean shouldFilter(){
   RequestContext ctx = getCurrentContext("source");

}

}

# declare the beans
@Bean
public MyFilter myFilter(){
 return new MyFilter();
}
#+END_SRC

** Tools
*** Swagger, Apiary

Swagger dependency

#+BEGIN_SRC 
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.7.0</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.7.0</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-data-rest</artifactId>
			<version>2.7.0</version>
		</dependency>
#+END_SRC 

Swagger config

#+BEGIN_SRC 

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class SwaggerConfig {
	@Bean
	public Docket api() {
		return new Docket(DocumentationType.SWAGGER_2).select().apis(RequestHandlerSelectors.any())
				.paths(PathSelectors.any()).build();
	}
}
#+END_SRC

*** Postman, Curl
*** Burp/Charles/Fiddler
*** Wireshark
Filter, follow stream
- http
- ssl

** Setting up front end
*** NPM initiate Angular 2 Project
**** Add bootstrap
**** Add login and register controls
**** Add authentication service
**** Add dashboard service
**** Add Authentication guard and UI
** Continuous Integration
*** Front End
**** Dockerfile and Docker-Compose
***** Our infratructure
***** Nginx
**** Using Make to perform the build
***** Clean
***** Install and Build
***** Archive
***** Publish
***** Cleanprod, Deploy
**** Jenkinsfile
*** Back end APIs 
**** Dockerfile and Docker-Compose
***** Spring boot java application
***** active profiles
**** Maven
***** Eclipse shows errors even if maven compiles
1. Go to Window -> Show View -> Problems

Or check if any warnings are shown in your Maven build. If any of the Jars show up signature issues - delete the old ones get the new ones.

If you found some of the Jar's giving problem in your .m2 directory. Delete them and rebuild the pom.

Get rid of all the warnings. Then

Project > Clean and
Maven > Update Project

2. Get the latest Maven from Here:
https://maven.apache.org/download.cgi

Install it and set the M2_HOME and Path.

3. Set the maven to system one in Windows > Preferences > Maven > Installations and ADD the location to your maven installation.


4. Download Latest m2e plugin

http://download.eclipse.org/technology/m2e/releases

Nothing helped? Download the latest eclipse/STS.

***** Clean PacKage
**** Make 
***** publish
***** clean deploy
**** Jenkinsfile
** Continuous Deployment
*** Playbook roles
**** Download latest
**** Install prerequisites
**** Build Images
**** Run containers
***** Postgresql database
***** Authentication API
****** Liquibase Migrations
***** Front End
****** Nginx hosting the front end
****** Nginx Mapping to upstream containers
* Bug fixes

** Spring boot compile both as JAR and deployable WAR

In <properties> ensure
 ~<start-class>com.boot.BlogpostApp</start-class>~
and default packaging type ~<packaging.type>war</packaging.type>~

Add the profiles for compilation to JAR or WAR

#+BEGIN_SRC 
<profiles>
    <profile>
      <id>jar</id>
      <properties>
        <packaging.type>jar</packaging.type>
      </properties>
    </profile>
    <profile>
      <id>war</id>
      <activation>
      <activeByDefault>true</activeByDefault>
      </activation>
      <properties>
        <packaging.type>war</packaging.type>
      </properties>
       <dependencies>
        <dependency>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-tomcat</artifactId>
          <scope>provided</scope>
        </dependency>
      </dependencies>
    </profile>
  </profiles>
#+END_SRC

Add following plugin cusotmizations in the <build>

#+BEGIN_SRC 
<plugin>
     <groupId>org.springframework.boot</groupId>
     <artifactId>spring-boot-maven-plugin</artifactId>
   </plugin>		
<plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-jar-plugin</artifactId>
	<configuration>
		<archive>
			<manifest>
				<mainClass>com.boot.BlogpostApp</mainClass>
				<addClasspath>true</addClasspath>
			</manifest>
		</archive>
	</configuration>
</plugin>
<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-war-plugin</artifactId>
  <configuration>
    <archive>
      <manifest>
      	<mainClass>com.boot.BlogpostApp</mainClass>
        <addClasspath>true</addClasspath>
      </manifest>
    </archive>
  </configuration>
</plugin>
#+END_SRC

** Spring boot 1.5.1.RELEASE CORS disable

In our WebMvcConfig we configured csrf as below:

#+BEGIN_SRC 
package com.boot.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.CorsRegistry;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;

@Configuration
@EnableWebMvc
public class WebMvcConfig extends WebMvcConfigurerAdapter{

	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		registry.addResourceHandler("swagger-ui.html")
			.addResourceLocations("classpath:/META-INF/resources/");
		registry.addResourceHandler("/webjars/**")
			.addResourceLocations("classpath:/META-INF/resources/webjars/");
	}

	@Override
	public void addCorsMappings(CorsRegistry registry) {
		registry.addMapping("/**")
		.allowedOrigins("*")
		.allowedMethods("PUT", "DELETE", "POST", "GET","PATCH")
		.allowCredentials(false).maxAge(3600);
	}
	
}
#+END_SRC

In WebSecurityConfig we have already disabled cors earlier ~http.csrf().disable();~

#+BEGIN_SRC 
package com.boot.config;

import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;

@Configuration
@EnableWebSecurity
class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    private static final String[] AUTH_WHITELIST = {
			"/webjars/**", 
			"/*.html", 
			"/favicon.ico", 
			"/**/*.css", 
			"/**/*.js",
			"/v2/api-docs/**", 
			"/swagger-resources/**",
            "/blogposts/**",
            "/home/**"
    };
    
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.csrf().disable();
        
        http.authorizeRequests()
                .antMatchers(AUTH_WHITELIST).permitAll()
                .antMatchers("/**/*").denyAll();
    }

}

#+END_SRC

Following filter will add the CORS headers. Modify the allowed CORS if required.

#+BEGIN_SRC 
package com.boot.config;


import org.springframework.stereotype.Component;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;


@Component
public class SimpleCORSFilter implements javax.servlet.Filter {
	@Override
	public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {
		HttpServletResponse res = (HttpServletResponse) response;
		HttpServletRequest  req = (HttpServletRequest) request;
		// Just REPLY OK if request method is OPTIONS for CORS (pre-flight)

		res.addHeader("Access-Control-Allow-Origin", "*");
		res.addHeader("Access-Control-Allow-Methods", "GET, POST, DELETE, PUT, OPTIONS");
		res.addHeader("Access-Control-Allow-Headers", "Origin, X-Requested-With");
		if ( req.getMethod().equals("OPTIONS") ) {
        res.setStatus(HttpServletResponse.SC_OK);
        return;
    }
		chain.doFilter(request, response);
	}

	@Override
	public void destroy() {}

	@Override
	public void init(FilterConfig filterConfig) throws ServletException {}
}

#+END_SRC

** Spring boot Jar runs locally but WAR shows no activity on tomcat. 

Ensure you extend the 
#+BEGIN_SRC 
@SpringBootApplication
@EnableConfigurationProperties
public class BlogpostApp extends SpringBootServletInitializer
{
    private static final Logger log = LoggerFactory.getLogger(BlogpostApp.class);

    public static void main( String[] args )
    {
    	log.info("Start Application BlogpostApp");
	ConfigurableApplicationContext context = SpringApplication.run(BlogpostApp.class, args);
	log.info("Started context "+ context.getApplicationName());
    }
}
#+END_SRC

** java ClassNotFoundException for org.h2.Driver
Upgrade/downgrade accordingly the dependency for 
#+BEGIN_SRC 
  <dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <version>xxx</version> <!-- ex: 1.4.195 -->
  </dependency>
#+END_SRC
** NoClassDefFoundError: org/hibernate/boot/MetadataBuilder, NoClassDefFoundError: org/hibernate/HibernateException
#+BEGIN_SRC 
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>5.0.4.Final</version>
</dependency>
#+END_SRC
** no main manifest attribute
Following plugins to your build will add the main manifest

#+BEGIN_SRC 
<plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-jar-plugin</artifactId>
	<configuration>
		<archive>
			<manifest>
				<mainClass>com.boot.BlogpostApp</mainClass>
				<addClasspath>true</addClasspath>
			</manifest>
		</archive>
	</configuration>
</plugin>
<plugin>
       <groupId>org.apache.maven.plugins</groupId>
       <artifactId>maven-war-plugin</artifactId>
       <configuration>
         <archive>
           <manifest>
           	<mainClass>com.boot.BlogpostApp</mainClass>
                <addClasspath>true</addClasspath>
           </manifest>
         </archive>
       </configuration>
</plugin>
#+END_SRC

** java.lang.NoClassDefFoundError: org/springframework/boot/SpringApplication
Add this plugin to <build> in pom.xml re-compile and run the jar, now it will package the full JAR
#+BEGIN_SRC 
    <plugin>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-maven-plugin</artifactId>
    </plugin>
#+END_SRC

** Spring Boot 403 Error on POST requests
Ensure in controller:
~@PostMapping(value = "/blogpost")~  Or  ~@RequestMapping(method = RequestMethod.POST)~

In Web security config either Disable CSRF or add the CSRF filter accordingly. Below is for disabling the csrf:

#+BEGIN_SRC 
@Configuration
@EnableWebSecurity
class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    private static final String[] AUTH_WHITELIST = {
		"/webjars/**", 
		"/*.html", 
		"/favicon.ico", 
		"/**/*.css", 
		"/**/*.js",
		"/v2/api-docs/**", 
		"/swagger-resources/**",
            "/blogpost/*"
    };
    
    @Override
    protected void configure(HttpSecurity http) throws Exception {

        http.csrf().disable();
        
        http.authorizeRequests()
                .antMatchers(AUTH_WHITELIST).permitAll()
                .antMatchers("/**/*").denyAll();
    }
}
#+END_SRC





** Mapping custom entity with Spring JPA



Custom model like this
#+BEGIN_SRC

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class EnvSummaryModel {
    String environment;
    Number janCost;
    Number febCost;
    Number aprCost;
    Number mayCost;
    }

#+END_SRC

#+BEGIN_SRC

//Notice the alias for property names mapped to class above 
@Repository
public class CritereaQueryRepository {

    @PersistenceContext
    EntityManager entityManager;

    public List<EnvSummaryModel> getEnvSummary(HashMap<String, Object> params){
        String query = "select s.environment as environment,sum(sp.jan_cost) as janCost,sum(sp.feb_cost) as febCost"
                + "from srvinfo s inner join srvprice sp on s.hostname=sp.hostname group by s.environment;";
        Query nativeQuery = entityManager.createNativeQuery(query);
        if(params!=null && params.keySet().size()>0) {
            for (String key : params.keySet()) {
                nativeQuery.setParameter(key, params.get(key));
            }
        }

        nativeQuery.unwrap(org.hibernate.Query.class)
                .setResultTransformer(Transformers.aliasToBean(EnvSummaryModel.class));

        return nativeQuery.getResultList();
    }
    }
#+END_SRC


** Generic mapping
#+BEGIN_SRC
    public static <T> List<T> map(Class<T> type, List<Object[]> records){
        List<T> result = new LinkedList<>();
        for(Object[] record : records){
            result.add(map(type, record));
        }
        return result;
    }
#+END_SRC
 
 
 ** GenericEntity mongodb repository
#+BEGIN_SRC
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.Id;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class GenericEntity {
    @Id
    String Id;

    String ObjectKey;

    Object ObjectValue;
}
#+END_SRC

#+BEGIN_SRC
import org.springframework.data.mongodb.repository.MongoRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface GenericEntityMongoRepository extends MongoRepository<GenericEntity, String> {
}
#+END_SRC

** Spring jpa hibernate custom query results (Native or Hql) as typed java objects

#+BEGIN_SRC

    @PersistenceContext
    EntityManager entityManager;

    public  <T> List<T> getNativeQueryResultAsTypedList(Class<T> type, String query, HashMap<String, Object> params){
        Query nativeQuery = entityManager.createNativeQuery(query);
        if(params!=null && params.keySet().size()>0) {
            for (String key : params.keySet()) {
                nativeQuery.setParameter(key, params.get(key));
            }
        }
        nativeQuery.unwrap(org.hibernate.Query.class)
                .setResultTransformer(Transformers.aliasToBean(type));

        return nativeQuery.getResultList();
    }

    public <T> List<T> getHqlQueryResultAsTypedList(Class<T> type, String query, HashMap<String,Object> params){
        Query customQuery = entityManager.createQuery(query);
        if(params!=null && params.keySet().size()>0) {
            for (String key : params.keySet()) {
                customQuery.setParameter(key, params.get(key));
            }
        }
        customQuery.unwrap(org.hibernate.Query.class)
                .setResultTransformer(Transformers.aliasToBean(type));
        return  customQuery.getResultList();
    }
#+END_SRC


** POJO to excel and excel to pojo

#+BEGIN_SRC
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi</artifactId>
			<version>3.17</version>
		</dependency>
		<dependency>
			<groupId>org.apache.poi</groupId>
			<artifactId>poi-ooxml</artifactId>
			<version>3.17</version>
		</dependency>
#+END_SRC

#+BEGIN_SRC
    public JsonArray getJsonElements(Workbook workbook, Integer sheetNumber) {
        JsonArray rtrnList;
        // Retrieving the number of sheets in the Workbook
        logger.debug("Workbook has " + workbook.getNumberOfSheets() + " Sheets : ");
        /*
           =============================================================
           Iterating over all the sheets in the workbook (Multiple ways)
           =============================================================
        */
        // 1. You can obtain a sheetIterator and iterate over it
        Iterator<Sheet> sheetIterator = workbook.sheetIterator();
        logger.debug("Retrieving Sheets using Iterator");
        while (sheetIterator.hasNext()) {
            Sheet sheet = sheetIterator.next();
            logger.debug("=> " + sheet.getSheetName());
        }
        // 2. Or you can use a for-each loop
        logger.debug("Retrieving Sheets using for-each loop");
        for (Sheet sheet : workbook) {
            logger.debug("=> " + sheet.getSheetName());
        }
        // 3. Or you can use a Java 8 forEach with lambda
        logger.debug("Retrieving Sheets using Java 8 forEach with lambda");
        workbook.forEach(sheet -> {
            logger.debug("=> " + sheet.getSheetName());
        });
        /*
           ==================================================================
           Iterating over all the rows and columns in a Sheet (Multiple ways)
           ==================================================================
        */
        // Getting the Sheet at index zero
        Sheet sheet = workbook.getSheetAt(sheetNumber);
        // Create a DataFormatter to format and get each cell's value as String
        DataFormatter dataFormatter = new DataFormatter();
        //iterateWithRowIterator(sheet, dataFormatter);
        rtrnList = toJsonObject(sheet, dataFormatter);

        //iterateWithLambda(sheet, dataFormatter);
        // Closing the workbook
        return rtrnList;
    }

    protected void iterateSimple(Sheet sheet, DataFormatter dataFormatter) {
        // 2. Or you can use a for-each loop to iterate over the rows and columns
        logger.debug("\n\nIterating over Rows and Columns using for-each loop\n");
        for (Row row : sheet) {
            for (Cell cell : row) {
                String cellValue = dataFormatter.formatCellValue(cell);
                System.out.print(cellValue + "\t");
            }
            logger.debug("Finished iterating batch");
        }
    }

    public XSSFWorkbook objectListToExcelWorksheet(List jsonArray){
        //Create blank workbook
        XSSFWorkbook workbook = new XSSFWorkbook();

        try{
            int rowid = 0;
            Object firstElement = jsonArray.get(0);
            String[] propNames= EntityUtils.getAllPropertyNames(firstElement);


            XSSFSheet spreadsheet = workbook.createSheet(firstElement.getClass().getName());

            //Create header row object
            XSSFRow row;
            //For the first item, add the header row as well as values
            row = spreadsheet.createRow(rowid++);
            int cellid = 0;
            Cell cell = row.createCell(cellid++);
            cell.setCellValue("#");

            for (String propName : propNames){
            String headerCellValue = propName;
                Cell header_cell = row.createCell(cellid++);

                for (AppSettings set : appSettingsRepository.findAll()){
                    //If any of the aliases exist, pick the first alias and set it as header
                    if(set.getName().equalsIgnoreCase(propName)) {
                        String[] strAliases = set.getValue().split(",");
                        List<String> lstAliases = Arrays.asList(strAliases);
                        headerCellValue=lstAliases.get(0);
                    }
                }
                header_cell.setCellValue(headerCellValue);
            }


            for(int i=0; i< jsonArray.size(); i++) {
                Object obj = jsonArray.get(i);

                XSSFRow value_row = spreadsheet.createRow(rowid++);
                int value_cellid = 0;
                Cell num_cell = value_row.createCell(value_cellid++);
                num_cell.setCellValue(rowid);

                for (String propName : propNames){
                    Cell value_cell = value_row.createCell(value_cellid++);
                    Object cel_value =EntityUtils.getPropertyValue(obj,propName);
                    if (cel_value != null) {
                        if (cel_value instanceof String) {
                            value_cell.setCellValue((String)cel_value);
                        } else if (cel_value instanceof Double) {
                            value_cell.setCellValue((Double)cel_value);
                        } else if (cel_value instanceof Integer) {
                            value_cell.setCellValue((Integer)cel_value);
                        } else if (cel_value instanceof java.util.Date) {
                            value_cell.setCellValue((java.util.Date)cel_value);
                        } else if (cel_value instanceof Boolean) {
                            value_cell.setCellValue((Boolean)cel_value);
                        }
                    }
                }
            }
        }catch (Exception ex){
            logger.error(EntityUtils.getStrackTraceAsString(ex));
        }
        return workbook;
    }

    protected JsonArray toJsonObject(Sheet sheet, DataFormatter dataFormatter) {
        // 2. Or you can use a for-each loop to iterate over the rows and columns
        logger.debug("\n\nIterating over Rows and Columns using for-each loop\n");
        Iterator<Row> sheetIterator = sheet.iterator();
        JsonArray sheetArray = new JsonArray();
        ArrayList<String> columnNames = new ArrayList<String>();
        while (sheetIterator.hasNext()) {
            Row currentRow = sheetIterator.next();
            JsonObject jsonObject = new JsonObject();
            if (currentRow.getRowNum() != 0) {
                for (int j = 0; j < columnNames.size(); j++) {
                    if (currentRow.getCell(j) != null) {
                        if (currentRow.getCell(j).getCellTypeEnum() == CellType.STRING) {
                            jsonObject.addProperty(columnNames.get(j), currentRow.getCell(j).getStringCellValue());
                        } else if (currentRow.getCell(j).getCellTypeEnum() == CellType.NUMERIC) {
                            jsonObject.addProperty(columnNames.get(j), currentRow.getCell(j).getNumericCellValue());
                        } else if (currentRow.getCell(j).getCellTypeEnum() == CellType.BOOLEAN) {
                            jsonObject.addProperty(columnNames.get(j), currentRow.getCell(j).getBooleanCellValue());
                        } else if (currentRow.getCell(j).getCellTypeEnum() == CellType.BLANK) {
                            jsonObject.addProperty(columnNames.get(j), "");
                        }
                    } else {
                        jsonObject.addProperty(columnNames.get(j), "");
                    }
                }
                sheetArray.add(jsonObject);
            } else {
                // store column names
                for (int k = 0; k < currentRow.getPhysicalNumberOfCells(); k++) {
                    String sheetHeaderValue = currentRow.getCell(k).getStringCellValue().trim();
                    String sheetHeaderMap = sheetHeaderValue;

                    for (AppSettings set : appSettingsRepository.findAll()){
                        //If the header cell matches any of the aliases
                        String[] strAliases = set.getValue().split(",");
                        List<String> lstAliases = Arrays.asList(strAliases);
                        if(lstAliases.stream().anyMatch(x->x.equalsIgnoreCase(sheetHeaderValue))){
                            sheetHeaderMap=set.getName();
                        }
                    }
                    columnNames.add(sheetHeaderMap);
                }
            }
        }

        return sheetArray;
    }


    protected void iterateWithLambda(Sheet sheet, DataFormatter dataFormatter) {
        // 3. Or you can use Java 8 forEach loop with lambda
        logger.debug("\n\nIterating over Rows and Columns using Java 8 forEach with lambda\n");
        sheet.forEach(row -> {
            row.forEach(cell -> {
                String cellValue = dataFormatter.formatCellValue(cell);
                System.out.print(cellValue + "\t");
            });
            logger.debug("finished iterating batch with lambda");
        });
    }

    protected void iterateWithRowIterator(Sheet sheet, DataFormatter dataFormatter) {
        // 1. You can obtain a rowIterator and columnIterator and iterate over them
        logger.debug("\n\nIterating over Rows and Columns using Iterator\n");
        Iterator<Row> rowIterator = sheet.rowIterator();
        while (rowIterator.hasNext()) {
            Row row = rowIterator.next();
            // Now let's iterate over the columns of the current row
            Iterator<Cell> cellIterator = row.cellIterator();
            while (cellIterator.hasNext()) {
                Cell cell = cellIterator.next();
                String cellValue = dataFormatter.formatCellValue(cell);
                System.out.print(cellValue + "\t");
            }
            logger.debug("Finished iterating batch using iterator");
        }
    }
#+END_SRC

** fixing the node-sass dependency issue with angular 7

#+BEGIN_SRC
# delete first the package-lock.json as it might come from different system
rm -rf $APP_BUILD_DIR/package-lock.json || true
curl -k -O https://github.com/sass/node-sass/releases/download/v4.14.1/linux-x64-57_binding.node
/bin/bash -c "npm --sass-binary-path=${APP_BUILD_DIR}/linux-x64-64_binding-4.12.0.node --registry "${MY_NPM_REGISTRY}" install --no-optional"
#+END_SRC
