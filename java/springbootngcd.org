* Spring Boot Angular 2 Continuou Delivery Pipeline
** Setting up Spring Boot Microservices
*** Authentication API
**** Maven begin project
**** Security
***** Authentication
Authentication Filter  > Authentication Manager
> Authentication Provider > User Details Service > User Details > Authentication
> SecurityContext
***** Authorziation

**** Set up H2 Database
**** Set up User Table
**** Set up Rest API
**** Set up Persistence Model
**** Liquibase Migration


*****  pom.xml
#+BEGIN_SRC xml
		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
		</dependency>
	<dependency>
		<groupId>com.h2database</groupId>
		<artifactId>h2</artifactId>
	</dependency>
#+END_SRC

***** application.properties
#+BEGIN_SRC 
liquibase.changeLog=classpath:liquibase/migrations/db.changelog.xml
liquibase.url=${spring.datasource.url}
liquibase.user=${spring.datasource.username}
liquibase.password=${spring.datasource.password}
liquibase.dropFirst=false
#+END_SRC

***** /src/main/resources/liquibase/migrations/db.changelog.xml
#+BEGIN_SRC xml
<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.0.xsd
        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <include file="liquibase/migrations/db.changelog.0.0.1.xml" />

</databaseChangeLog>
#+END_SRC

***** /src/main/resources/liquibase/migrations/db.changelog.0.0.1.xml
#+BEGIN_SRC xml
<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.0.xsd
        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <changeSet author="amitthk" id="1">
    <sql dbms="h2"
            endDelimiter=";"
            splitStatements="true"
            stripComments="true">
            DROP TABLE USERS IF EXISTS;
	CREATE TABLE USERS (
	ID BIGINT auto_increment PRIMARY KEY,
	USERNAME VARCHAR(255),EMAIL VARCHAR(255),PASSWORDHASH VARCHAR(255),SALT VARCHAR(255), CREATEDATE DATE, LASTLOGIN DATE,LASTUPDATE DATE);
    </sql>
    
	<sql dbms="PostgreSQL"
	            endDelimiter=";"
	            splitStatements="true"
	            stripComments="true">
	CREATE TABLE IF NOT EXISTS USERS (
	ID BIGSERIAL PRIMARY KEY,
	USERNAME VARCHAR(255),
	EMAIL VARCHAR(255),
	PASSWORDHASH VARCHAR(255),
	SALT VARCHAR(255), 
	CREATEDATE DATE, 
	LASTLOGIN DATE,
	LASTUPDATE DATE);
	    </sql>
</changeSet>
    
</databaseChangeLog>
#+END_SRC


**** Mybatis

***** pom.xml
#+BEGIN_SRC xml
		<dependency>
			<groupId>org.mybatis.spring.boot</groupId>
			<artifactId>mybatis-spring-boot-starter</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<version>1.1.1</version>
		</dependency>
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>1.3.0</version>
		</dependency><!--$NO-MVN-MAN-VER$-->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>3.4.5</version>
		</dependency>
#+END_SRC

***** PersistenceConfiguration
#+BEGIN_SRC xml
public class PersistenceConfiguration {
	@Bean
	@ConfigurationProperties(prefix="spring.datasource")
	@Primary
	public DataSource dataSource() {
		DriverManagerDataSource dataSource = new DriverManagerDataSource();
        return dataSource;
	}
	

    @Bean
    public SqlSessionFactoryBean sqlSessionFactory() throws Exception {
        SqlSessionFactoryBean sessionFactory = new SqlSessionFactoryBean();
        sessionFactory.setDataSource(dataSource());
        sessionFactory.setTypeAliasesPackage("com.amitthk.springbootngcd.domain");
        return sessionFactory;
    }
#+END_SRC
***** Application Properties
#+BEGIN_SRC 
spring.h2.console.enabled=true
spring.h2.console.path=/h2

spring.database.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:file:~/mysbappdb
spring.datasource.username=sa
spring.datasource.password=
spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.max-active=5
spring.datasource.max-idle=3
spring.datasource.max-wait=10000
spring.datasource.min-evictable-idle-time-millis=1000
spring.datasource.min-idle=8
spring.datasource.time-between-eviction-runs-millis=1
#+END_SRC
***** UserInfoMapper
#+BEGIN_SRC java
public interface UserMapper {
    int deleteByPrimaryKey(Long id);
    Long insert(UserInfo record);
    int insertSelective(UserInfo record);
    UserInfo selectByPrimaryKey(Long id);
    UserInfo selectByEmail(String id);
    List<UserInfo> selectAll();
    int updateByPrimaryKeySelective(UserInfo record);
    int updateByPrimaryKey(UserInfo record);
}
#+END_SRC
Use the XML mappings generated by mybatis-generator

**** Setup JWT token authentication
**** Setup Spring Security
*** Dashboard API
**** Set Up JWT Token Authentication
*** Netï¬‚ix Eureka, ZooKeeper,Consul, Etcd
STS > Cloud Discovery > Eureka Server
Eureka Server, Actuator

@EnableEurekaServer
@SpringBootApplication
...
  

- application.properties

server.port=8991
eureka.client.register-witheureka=false
eureka.client.fetch-registry=false
eureka.datacenter=singapore
eureka.environment=sit

....
- Client: 

  - Maven add dependency Eureka
  - @EnableDiscoveryClient   or @EnableEurekaClient
  - bootstrap.properties
    - spring.application.name=myservice
  - application.properties
    - eureka.client.register-with-eureka=true
    - eureka.client.fetch-registry=true
    - eureka.client.serviceUrl.defaultZone=http://localhost:8991/eureka/
    - eureka.instance.instance-id=${spring.application.name}:${random.int}
    - server.port=0
    - server.instance.hostname=sit

#+BEGIN_SRC 
@LoadBalancer
@Bean
public RestTemplate restTemplate(RestTemplateBuilder builder)
{
returng builder.build();
}

@Autowired
private RestTemplate restTemplate;

ServerInfo si = restTemplate.getForObject("http://myserviceid/serverinfo/"+id);

#+END_SRC

Additional health checks

#+BEGIN_SRC 
public class MyHealthCheck implements HealthIndicator{

public Health health(){
try{
...
return Health.up().build();
}
catch(RuntimeException exc){
  return Health.down().withDetail(exc.getMessage()).build();
}

}
}
#+END_SRC

eureka.client.healthcheck.enabled=true 

*** Zuul Proxy/API Gateway
- Ribbon
  - MyServiceController
    - @RibbonClient(name="myservice")
  - application.properties
    - ribbon.eureka.enabled=false
    - myservice-local.ribbon.listOfServers=http://localhost:8091,...
    - myservice-local.ribbon.MaxAutoRetries=0
    - myservice-local.ribbon.OkToretryOnAllOperations=false
    - myservice-local.ribbon.MaxUtoRetriesNextServer=1
  - application.properties
    - ribbon.eureka.enabled=true
    - #remove above properties they come from eureka
  - Handle in config  @RibbonClient(name="myservice",configuration=Myconfig.class)
    - 
**** Zuul
spring.io  > web , Cloud Routing > Zuul
#+BEGIN_SRC 

@EnableZuulProxy
public class MyApp....

server.port=8080
management.security.enabled=false
spring.application.name=toll-api-proxy

zuul.routes.trproxy.url=http://localhost:89398
zuul.routes.trproxy.path=/rootproxy/**

#Eureka behind proxy
ribbon.eureka.enabled=false
zuul.routes.trproxy.path=/rootproxy/**
zuul.routes.trproxy.serviceId=proxy
proxy.ribbon.listOfServers=http://localhost:89398....

#Come only via proxy
zuul.ignoredServices=*
zuul.routes.trproxy.path=/rootproxy/**
zuul.routes.trproxy.serviceId=my-rootproxy
zuul.ignoredPatterns=/rootproxy/users/1

#start with prefix /url/....
zuul.prefix=url
#+END_SRC

- Pre  filters
- routing filters
- post filters
- error filters

- Filter
  - Type
  - Execution order
  - execution criteria
  - action
- Filter RequestContext
- Fileters can be disabled in properties


#+BEGIN_SRC 
import com.netflix.zuul.ZuulFilter;
import com.netflix.zuul.RequestContext;
import static com.netflix.zuul.context.RequestContext.getCurrentContext; 

public class MyFilter extends ZuulFilter{

@Override
public Object run(){
  System.out.println("filter called");
}

@Override
public boolean shouldFilter(){
   RequestContext ctx = getCurrentContext("source");

}

}

# declare the beans
@Bean
public MyFilter myFilter(){
 return new MyFilter();
}
#+END_SRC

** Tools
*** Swagger, Apiary

Swagger dependency

#+BEGIN_SRC 
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.7.0</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.7.0</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-data-rest</artifactId>
			<version>2.7.0</version>
		</dependency>
#+END_SRC 

Swagger config

#+BEGIN_SRC 

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@Configuration
@EnableSwagger2
public class SwaggerConfig {
	@Bean
	public Docket api() {
		return new Docket(DocumentationType.SWAGGER_2).select().apis(RequestHandlerSelectors.any())
				.paths(PathSelectors.any()).build();
	}
}
#+END_SRC

*** Postman, Curl
*** Burp/Charles/Fiddler
*** Wireshark
Filter, follow stream
- http
- ssl

** Setting up front end
*** NPM initiate Angular 2 Project
**** Add bootstrap
**** Add login and register controls
**** Add authentication service
**** Add dashboard service
**** Add Authentication guard and UI
** Continuous Integration
*** Front End
**** Dockerfile and Docker-Compose
***** Our infratructure
***** Nginx
**** Using Make to perform the build
***** Clean
***** Install and Build
***** Archive
***** Publish
***** Cleanprod, Deploy
**** Jenkinsfile
*** Back end APIs 
**** Dockerfile and Docker-Compose
***** Spring boot java application
***** active profiles
**** Maven
***** Eclipse shows errors even if maven compiles
1. Go to Window -> Show View -> Problems

Or check if any warnings are shown in your Maven build. If any of the Jars show up signature issues - delete the old ones get the new ones.

If you found some of the Jar's giving problem in your .m2 directory. Delete them and rebuild the pom.

Get rid of all the warnings. Then

Project > Clean and
Maven > Update Project

2. Get the latest Maven from Here:
https://maven.apache.org/download.cgi

Install it and set the M2_HOME and Path.

3. Set the maven to system one in Windows > Preferences > Maven > Installations and ADD the location to your maven installation.


4. Download Latest m2e plugin

http://download.eclipse.org/technology/m2e/releases

Nothing helped? Download the latest eclipse/STS.

***** Clean PacKage
**** Make 
***** publish
***** clean deploy
**** Jenkinsfile
** Continuous Deployment
*** Playbook roles
**** Download latest
**** Install prerequisites
**** Build Images
**** Run containers
***** Postgresql database
***** Authentication API
****** Liquibase Migrations
***** Front End
****** Nginx hosting the front end
****** Nginx Mapping to upstream containers
* Bug fixes
** java ClassNotFoundException for org.h2.Driver
Upgrade/downgrade accordingly the dependency for 
#+BEGIN_SRC 
  <dependency>
    <groupId>com.h2database</groupId>
    <artifactId>h2</artifactId>
    <version>xxx</version> <!-- ex: 1.4.195 -->
  </dependency>
#+END_SRC
** NoClassDefFoundError: org/hibernate/boot/MetadataBuilder, NoClassDefFoundError: org/hibernate/HibernateException
#+BEGIN_SRC 
<dependency>
    <groupId>org.hibernate</groupId>
    <artifactId>hibernate-core</artifactId>
    <version>5.0.4.Final</version>
</dependency>
#+END_SRC
** no main manifest attribute
Following plugins to your build will add the main manifest

#+BEGIN_SRC 
<plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-jar-plugin</artifactId>
	<configuration>
		<archive>
			<manifest>
				<mainClass>com.boot.BlogpostApp</mainClass>
				<addClasspath>true</addClasspath>
			</manifest>
		</archive>
	</configuration>
</plugin>
<plugin>
       <groupId>org.apache.maven.plugins</groupId>
       <artifactId>maven-war-plugin</artifactId>
       <configuration>
         <archive>
           <manifest>
           	<mainClass>com.boot.BlogpostApp</mainClass>
                <addClasspath>true</addClasspath>
           </manifest>
         </archive>
       </configuration>
</plugin>
#+END_SRC

** java.lang.NoClassDefFoundError: org/springframework/boot/SpringApplication
Add this plugin to <build> in pom.xml re-compile and run the jar, now it will package the full JAR
#+BEGIN_SRC 
    <plugin>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-maven-plugin</artifactId>
    </plugin>
#+END_SRC

** Spring Boot 403 Error on POST requests
Ensure in controller:
~@PostMapping(value = "/blogpost")~  Or  ~@RequestMapping(method = RequestMethod.POST)~

In Web security config either Disable CSRF or add the CSRF filter accordingly. Below is for disabling the csrf:

#+BEGIN_SRC 
@Configuration
@EnableWebSecurity
class WebSecurityConfig extends WebSecurityConfigurerAdapter {

    private static final String[] AUTH_WHITELIST = {
		"/webjars/**", 
		"/*.html", 
		"/favicon.ico", 
		"/**/*.css", 
		"/**/*.js",
		"/v2/api-docs/**", 
		"/swagger-resources/**",
            "/blogpost/*"
    };
    
    @Override
    protected void configure(HttpSecurity http) throws Exception {

        http.csrf().disable();
        
        http.authorizeRequests()
                .antMatchers(AUTH_WHITELIST).permitAll()
                .antMatchers("/**/*").denyAll();
    }
}
#+END_SRC
