* kubernetes
** minikube start
minikube start --vm-driver="hyperv" --hyperv-virtual-switch="Default Switch"  
kubectl get nodes

minikube dashboard
** kubectl
#+BEGIN_SRC 
sudo wget https://storage.googleapis.com/kubernetes-release/release/v1.0.1/bin/linux/amd64/kubectl
sudo chmod +x kubectl
sudo mv kubectl /usr/local/bin/.
#+END_SRC

#+BEGIN_SRC 
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
#+END_SRC

~sudo yum -y install kubectl
** examples
https://github.com/kubernetes/kubernetes/tree/release-1.10/examples

https://github.com/wardviaene/kubernetes-course

** kubectl config
~/.kube/config

kubectl --help | less
kubectl config view
kubectl config set-context --current --namespace=<insert-namespace-name-here>


kubectl run NAME --image=image [--env="key=value"] [--port=port] [--replicas=replicas] [--dry-run=bool]
[--overrides=inline-json] [--command] -- [COMMAND] [args...] [options]

<background>
kubectl proxy --port=8001 &

curl http://localhost:8001/
curl http://localhost:8002/api/v1/namespaces/default/pods

kubectl auth can-i

kubectl get deployments nginx --export -o yaml
kubectl replace -f nginx.yaml
kubectl apply -f nginx.yaml



** pods
kubectl get nodes




=====
#pod.yaml
#+BEGIN_SRC 
apiVersion: v1
kind: pod
metadata:
  name: hello-pod
spec:
  containers:
    - name: hello-ctr
      image: amitthk/angdnx
      ports:
        - containerPort: 5000
#+END_SRC 
=====


kubectl create -f pod.yaml

kubectl get pods

kubectl describe pods

kubectl get pods/hello-pod

kubectl get pods --all-namespaces
** replication controllers

#replc.yaml
#+BEGIN_SRC 
apiVersion: v1
kind: ReplicationControler
metadata:
  name: hello-rc
spec:
  reeplicas: 5
  selector:
    app: hello-world
  template:
    metadata:
      labels:
        app: hello-world
    spec:
      containers:
      - name: hello-world
        image: amitthk/angdnx
        ports:
          - containerPort: 5000
#+END_SRC 
===

kubectl create -f replc.yaml

===
vi replc.yaml

replicas: 10
===

kubectl apply -f replc.yaml

kubectl get rc

kubectl get rc -o wide

kubectl get pods
** services

kubectl expose rc hello-rc --name=hello-svc --targetPort=8080 --type=NodePort
kubectl describe svc hello-svc

# IP is virtual ip, NodePort is expose port


====
#vi hello-svc.yaml
#+BEGIN_SRC 
apiVersion: v1
kind: Service
metadata:
  name: hello-svc
  labels:
    app: hello-world
spec:
  type: NodePort
  ports:
  - port: 8080
    protocol: TCP
  selector:
    app: hello-world
#+END_SRC 
============

ServiceTypes: 

Clusterip :  "stable" internal cluster ip
NodePort:   Expose app outside cluster. Adds cluster-wide port on top of ClusterIP
LoadBalancer: Integrates NodePort with cloud based load balancers
** endpoints

kubectl get ep #endpoints
** deployments

deployments => replica-sets => pods => containers

kubectl rolling-update -f updated-rc.yml

=======
#vi depl.yml
#+BEGIN_SRC 
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: hello-deployment
spec:
  replicas: 10
  template:
    metadata:
      labels:
        app: hello-world
    spec:
      containers:
      - name: hello-pod
        image: amtithk/angdnx
        ports:
        - containerPort: 5000
#+END_SRC 
==========

kubectl create -f depl.yml
kubectl describe deploy hello-deployment

====update===
#vi depl.yml
#+BEGIN_SRC 
spec:
  replicas: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
..... 
      image: amitthk/angdnx:0.0.2
#+END_SRC
========
*** rollout updated deployment
#+BEGIN_SRC 
kubectl apply -f depl.yml --record
kubectl rollout status deployment hello-deployment
kubectl rollout history deployment hello-deployment
*** rollback to previous replca set
kubectl rollout undo deployment hello-deploy --to-revision=1
#+END_SRC

=========

** healthchecks

*** startup probe

#+BEGIN_SRC 


#+END_SRC

*** livenessprobe

#+BEGIN_SRC 
containers:
- name: xyz
  ...
  livenessProbe:
    httpGet:
      path: /
      port: 3000
    initialDelaySeconds: 15
    timeoutSeconds: 30

#+END_SRC

*** readinessprobe

#+BEGIN_SRC 
containers:
- name: xyz
  ...
  livenessProbe:
    httpGet:
      path: /
      port: 3000
    initialDelaySeconds: 15
    timeoutSeconds: 30
  readinessProbe:
    httpGet:
      path: /
      port: 3000
    initialDelaySeconds: 15
    timeoutSeconds: 30
#+END_SRC

*** pod status, pod condition, container state

**** pod state
Pending - downloading image, resource constr
Succeeded - all containers terminated and wont be restarted
Failed - terminated containers. failiure code is exit code of process when ctr stops
Unknown - cannot be determined e.g. network error

**** pod conditions
pod scheduled
ready - ready to serve req. and will be added to svc 
initialized - initiz cntnrs started successfully
unschedulable - pod can't be scheduled
containersready

| Init container => | post start hook ==> | readiness probe, liveness probe ==> | pre stop hook |

** monitoring
heapster, influxdb, grafana

** persistence

hostpath volume

#+BEGIN_SRC 
apiVersion: v1
kind: PersistentVolume
metadata:
  name: db-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /data/db
#+END_SRC




** run k8s locally using docker

#+BEGIN_SRC 

docker run --net=host -d gcr.io/google_containers/etcd:2.0.9 /usr/local/bin/etcd --addr=127.0.0.1:4001 --bind-addr=0.0.0.0:4001 --data-dir=/var/etcd/data

 

docker run --net=host -d -v /var/run/docker.sock:/var/run/docker.sock  gcr.io/google_containers/hyperkube:v0.21.2 /hyperkube kubelet --api_servers=http://localhost:8080 --v=2 --address=0.0.0.0 --enable_server --hostname_override=127.0.0.1 --config=/etc/kubernetes/manifests

 

docker run -d --net=host --privileged gcr.io/google_containers/hyperkube:v0.21.2 /hyperkube proxy --master=http://127.0.0.1:8080 --v=2

#+END_SRC 

*** Running an application

kubectl -s http://localhost:8080 run-container nginx --image=nginx --port=80

*** Expose it as a service

kubectl expose rc nginx --port=80

*** Turn down cluster

docker ps -a | awk '{print $1}' | xargs docker kill

 

*** Docker
Show available images

docker images

*** Build image

docker build -t approdorix/appname .

*** Stop, remove containers/images
#+BEGIN_SRC 
docker stop $(docker ps -a -q)
docker rm $(docker ps -a -q)
docker rmi $(docker images -q) 

#+END_SRC 

*** Troubleshooting docker
You want to run screen but no tty in docker:
exec >/dev/tty 2>/dev/tty </dev/tty

** install gcloud sdk

#+BEGIN_SRC 
sudo tee -a /etc/yum.repos.d/google-cloud-sdk.repo << EOM
[google-cloud-sdk]
name=Google Cloud SDK
baseurl=https://packages.cloud.google.com/yum/repos/cloud-sdk-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
       https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOM

#+END_SRC
   
~sudo yum install google-cloud-sdk

** gcloud commands

#+BEGIN_SRC 
gcloud config set project lateral-ceiling-220011
gcloud config set compute/zone asia-southeast1-a
gcloud config set compute/region asia-southeast1
gcloud container clusters get-credentials  pyfln-k8s-cluster-dev

gcloud container clusters get-credentials pyfln-k8s-cluster-dev --zone asia-southeast1-a --project lateral-ceiling-220011 \
 && kubectl port-forward $(kubectl get pod --selector="app=jvcdp-ui-k8s" --output jsonpath='{.items[0].metadata.name}') 8080:8080


kubectl create -f my-deployment.yml

kubectl cluster-info

kubectl expose deployment jvcdp-ui-k8s-dc --type LoadBalancer --port 80 --target-port 80

#get the "External-IP" of the service here:
kubectl get svc jvcdp-ui-k8s-dc

#+END_SRC
   
