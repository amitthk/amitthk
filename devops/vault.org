https://sites.google.com/site/mrxpalmeiras/vault-cheat-sheet

./vault server -dev

vault server -config=s3backend.hcl

cat app.properties | base64 | ./vault write secret/app/uat application.properties=-

cat ./id_rsa_sit_amitthk | base64 | /c/Apps/Tools/vault/vault write secret/pyfln/sit sit_key_file=-

./vault kv get -field=application.properties secret/app/uat | base64 --decode

vault auth enable ldap

vault read auth/ldap/config


#+BEGIN_SRC 
Key                     Value
---                     -----
binddn                  n/a
case_sensitive_names    false
certificate             n/a
deny_null_bind          true
discoverdn              true
groupattr               cn
groupdn                 n/a
groupfilter             (|(memberUid={{.Username}})(member={{.UserDN}})(uniqueMember={{.UserDN}}))
insecure_tls            true
starttls                false
tls_max_version         tls12
tls_min_version         tls12
upndomain               amitthk.com
url                     ldap://192.168.0.119:389
userattr                uid
userdn                  ou=People,dc=amitthk,dc=com
#+END_SRC

#+BEGIN_SRC 
.\vault write auth/ldap/config \
    url="ldap://192.168.0.119:389" \
    userattr="cn" \
    userdn="ou=Users,dc=amitthk,dc=com" \
    groupdn="ou=Groups,dc=amitthk,dc=com" \
    groupfilter="(&(objectClass=groupOfNames)(member={{.UserDN}}))" \
    groupattr="cn"

#+END_SRC

./vault login -method=ldap username=atksv

#+BEGIN_SRC 
echo 'path "secret/pyfln/sit" { capabilities = ["read","create","update","list","delete"]}' | C:\Apps\Tools\vault\vault policy write pyfln_sit -
#+END_SRC

vault write auth/ldap/users/atksv policies=pyfln_sit

#+BEGIN_SRC 
vault policy write foo-policy -<<EOF
# Normal servers have version 1 of KV mounted by default, so will need these
# paths:
path "secret/*" {
  capabilities = ["create"]
}
path "secret/foo" {
  capabilities = ["read"]
}

# Dev servers have version 2 of KV mounted by default, so will need these
# paths:
path "secret/data/*" {
  capabilities = ["create"]
}
path "secret/data/foo" {
  capabilities = ["read"]
}
EOF

#+END_SRC

https://www.burgundywall.com/post/hashicorp-vault-and-freeipa


vault operator  init -key-shares=3 -key-threshold=2

vault operator unseal

** admin policy

We can attach an existing policy to a user like this

#+BEGIN_SRC 
vault write auth/ldap/users/atksv policies=super_adm
#+END_SRC

Create the following policy named super_adm

#+BEGIN_SRC
# Manage kv
path "kv/+/+/*"
{
  capabilities = ["create", "read", "update", "delete", "list", "sudo"]
} 
# Manage auth methods broadly across Vault
path "kv/*"
{
  capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}
# Manage auth methods broadly across Vault
path "auth/*"
{
  capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}

# Create, update, and delete auth methods
path "sys/auth/*"
{
  capabilities = ["create", "update", "delete", "sudo"]
}

# List auth methods
path "sys/auth"
{
  capabilities = ["read"]
}

# Create and manage ACL policies
path "sys/policies/acl/*"
{
  capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}

# To list policies - Step 3
path "sys/policies/acl"
{
  capabilities = ["list"]
}

# List, create, update, and delete key/value secrets
path "secret/*"
{
  capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}

# Create and manage secret engines broadly across Vault.
path "sys/mounts/*"
{
  capabilities = ["create", "read", "update", "delete", "list", "sudo"]
}

# Read health checks
path "sys/health"
{
  capabilities = ["read", "sudo"]
}

# To perform Step 4
path "sys/capabilities"
{
  capabilities = ["create", "update"]
}

# To perform Step 4
path "sys/capabilities-self"
{
  capabilities = ["create", "update"]
}

#+END_SRC

vault write auth/userpass/users/amitthk password=<somepassword> policies=super_adm
