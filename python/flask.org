flask



mkproject  my-project

pip install flask

initializr.com

==============
from flask import flask

app = Flask(__name__)

@app.route('/')
@app.route('/index')
def index():
    return render_template('index.html')

@app.errorHandler(404)
def page_not_found(e)
    return render_template('404.html'), 404

@app.errorHandler(500)
def page_not_found(e)
    return render_template('500.html'), 500

if __name__ == '__main__'
    app.run(debug=True)
================
base.html

<title>{% block title %} {% endblock %}</title>

href="{{ url_for('index') }}"


href="{{ url_for('static', filename='css/main.css') }}"
================
index.html
{% extends "base.html" %}
{% block title %}
myapp welcome
{% endblock %}

{% block content %}
<h1> hi there</h1}
{% endblock %}
=============

python console
app.url_map


return redirect(url_for('index'))
=========
===========
from flask import flask
from logger import DEBUG

app = Flask(__name__)
app.logger.setlevel(DEBUG) 

@app.route('/')
@app.route('/index')
def index():
    return render_template('index.html')

def store_bookmark(url):
    bookmarks.append(dict(url=url, user = 'amitthk', date = datetime.utcnow()))


@app.route('/add', methods = ['GET', 'POST'])
def add():
    if request.method == 'POST':
        url = request.form['url']
        store_bookmark(url)
        app.logger.debug('saved bookmark : + url)
    return render_template('add.html')

@app.errorHandler(404)
def page_not_found(e)
    return render_template('404.html'), 404

@app.errorHandler(500)
def page_not_found(e)
    return render_template('500.html'), 500

if __name__ == '__main__'
    app.run(debug=True)
===================
import flask.WTF

class MyForm:
   url = URLField('url', validators=[DataRequired(), url()])
   description = StringField('description')


@app.route('/add', methods = ['GET', 'POST'])
def add():
    form = MyForm()
    if form.validate_on_submit():
        url = form.url.data
        description = form.description.data
        store_bookmark(url, description)
        flash("Stored {}".format(description))
        return redirect(url_for('index'))
    return render_template('add.html', form=form)


template :  {% if form.url.error } class="danger" {% endif %}

*write macro for generating forms.
===============
SQLAlchemy model classes;

#pip install flask-sqlalchemy

Define a model in sqlalchemy it will be turned into a table 

#+BEGIN_SRC 
class Bookmark(db.Model):
    id = db.Column(db.Integer, primary_key=true)
    url = db.Column(db.Text, nullable=False)
    timestamp = db.Column(db.DateTime, datetime.utcnow)
    description = db.Column(db.String(300))
    owner = db.relationship('User', backref='user', lazy='dynamic') //A one to many relationship to other table name user
    lastUpdated = db.Column(db.DateTime, default=datetime.now)
    def __repr__(self):
        return "<bookmark  '{}' : '{}' >".format(self.description, self.url)

#+END_SRC

--
modification in app.py

#+BEGIN_SRC 
from flask_sqlalchemy import SQLAlchemy

app = Flask(__name__)
app.config['SECRET_KEY'] = "~tdjfd;safdsafjdsafj;fdsa"

app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config(['SQLALCHEMY_DATABASE_URL'] = 'sqlite:///'+os.path.join(basedir, 'myform.db')
db = SQLAlchemy(app)

#+END_SRC

============
from thermos.thermos import db
from thermos.models import User, Bookmark
db.create_all()
u= MyForm(url="http://google.com",description= 'awsome bookmark')
db.session.add(u)
db.session.commit()
Bookmark.query.get(2)

==============
** Python Mongodb CRUD

#+BEGIN_SRC 
import sys
import os
import json, imp, ast
import configparser
from functools import wraps
import pymongo
from bson.objectid import ObjectId
from bson.json_util import dumps
from pymongo import MongoClient

import flask_restplus

from flask import Blueprint, request, abort, Response, jsonify, url_for, session
from flask import current_app as app
from flask_restplus import Api, Resource, fields, reqparse
from DbHelper import DbHelper

DEBUG = True

blueprint = Blueprint('userinfo',__name__,url_prefix='/api/userinfo')
api = Api(blueprint)
ns = api.namespace('userinfo',description='Simple Flask Ldap App')


add_user_model = api.model("add_user_model", {
    "firstName": fields.String("firstName"),
    "lastName": fields.String("lastName"),
    "dob": fields.String("dob"),
    "email": fields.String("email"),
    "country": fields.String("country"),
    "passwordHash": fields.String("passwordHash")
})


utils_path = sys.path.append(os.path.join(os.path.dirname(__file__), "utils.py"))
utils = imp.load_source('*', utils_path)

@ns.route("")
@ns.route("/<id>")
class Home(Resource):
    # method_decorators=[must_auth]
    def get(self,collection=None):
        """
        Function to get the userinfos.
        """
        try:
            dbhelper = DbHelper(collection)
            q_params = utils.parse_q_params(request.query_string)
            if q_params:
                query = {k: int(v) if isinstance(v, str) and k=='_id' else v for k, v in q_params.items()}
                records_fetched = dbhelper.collection.find(query)
                if records_fetched.count() > 0:
                    return Response(dumps(records_fetched),status=200)
                else:
                    return "No Records found", 404
            else:
                if dbhelper.collection.find().count > 0:
                    return Response(dumps(dbhelper.collection.find()), mimetype='application/json')
                else:
                    return jsonify([])
        except:
            raise #return "", 500

    @api.expect(add_user_model)    
    def post(self, collection=None):
        """
        Function to add new userinfo(s).
        """
        try:
            if collection is None:
                return Response('collection cannot be null', status = 404)
            dbhelper = DbHelper(collection)
            try:
                valustr = json.dumps(request.get_json(), separators=(',',':'), sort_keys=True)
                value = json.loads(valuestr)
                body=value
            except:
                return Response("An error has occured in parsing the values", 500)

            record_created = dbhelper.collection.insert(body)

            if isinstance(record_created, list):
                return Response(jsonify([str(v) for v in record_created]), status=201, mimetype = 'application/json')
            else:
                return Response(jsonify(str(record_created)), status=201, mimetype = 'application/json')
        except:
            raise #return "", 500

    @api.expect(add_user_model)    
    def put(self, collection=None):
        """
        Function to update a userinfo.
        """
        try:
            dbhelper = DbHelper(collection)
            try:
                valustr = json.dumps(request.get_json(), separators=(',',':'), sort_keys=True)
                value = json.loads(valuestr)
                body=value
            except:
                return Response("An error has occured in parsing the values", 500)
            objkey = ObjectId(body["_id","$oid"])
            updates = body.copy()
            updates.pop('_id',True)
            records_updated = dbhelper.collection.update_one({"_id": objkey}, {"$set", updates}, upsert=True)

            if records_updated.modified_count > 0:
                return Response(jsonify("Updated {} items!".format(records_updated.modified_count)), status=200, mimetype = 'application/json')
            else:
                return "", 404
        except:
            raise #return "", 500

    
    def delete(self, collection=None):
        """
        Function to delete a userinfo.
        """
        try:
            dbhelper = DbHelper(collection)
            q_params = utils.parse_q_params(request.query_string)
            if q_params and q_params.get('ObjectId'):
                delete_user = dbhelper.collection.delete_one({"_id": ObjectId(q_params.get('ObjectId'))})
            if delete_user.deleted_count > 0 :
                return Response("Deleted {} items!".format(delete_user.deleted_count), status=204, mimetype = 'application/json')
            else:
                return "No Object with that id", 404
        except:
            raise #return "", 500



#+END_SRC

#+BEGIN_SRC 
from flask import current_app
from pymongo import MongoClient
import string

class DbHelper:
    def __init__(self,collectionName=None):
        if(collectionName is None):
            raise Exception("collectionName cannot be null!")
        self.db_host = current_app.config['DATABASE_HOSTNAME']
        self.db_port = current_app.config['DATABASE_PORT']
        self.db_name = current_app.config['DATABASE_NAME']
        self.client = MongoClient(self.db_host,int(self.db_port.strip(string.ascii_letters)))
        self.db = self.client[self.db_name]
        self.collection = self.db[collectionName]
#+END_SRC

#+BEGIN_SRC 
from urlparse import parse_qs


def parse_q_params(query_string):
    # Parse the query param string
    q_params = dict(parse_qs(query_string))
    # Get the value from the list
    q_params = {k: v[0] for k, v in q_params.items()}
    return q_params

#+END_SRC

#+BEGIN_SRC 
import sys
import os
import json
import configparser
from functools import wraps

import flask_restplus

from flask import Flask, request, abort, Response, jsonify, url_for, session
from flask_restplus import Api, Resource, fields, reqparse
from auth.AuthApi import blueprint as auth_blueprint
from vault.VaultUserApi import blueprint as vault_user_blueprint
from userinfo.UserInfoApi import blueprint as userinfo_blueprint

DEBUG = True

app = Flask(__name__,instance_relative_config=True)
app.config.from_object(__name__)
app.config.from_pyfile('app.cfg')


config = configparser.ConfigParser

api = Api(app, version='1.0', title='Flask demo app', description = 'Flask demo app')
app.register_blueprint(auth_blueprint)
app.register_blueprint(vault_user_blueprint)
app.register_blueprint(userinfo_blueprint)

if __name__=="__main__":
    app.run(host='0.0.0.0')
#+END_SRC

#+BEGIN_SRC 
from app import app

if __name__ == "__main__":
    app.run()
#+END_SRC
