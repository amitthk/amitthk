* git

** git bare basics

*** git local repo
git init
git add *.java
git add README.md
git commit -m 'first project commit'

*** branches

Create a branch 

#+BEGIN_SRC 

git branch develop

#+END_SRC


A brand new branch and check it out 

#+BEGIN_SRC 
git checkout -b develop

#+END_SRC

branch out from exisiting branch

#+BEGIN_SRC 
git checkout -b feature/01-DEVAKTHK-CreateMavenProject develop

#+END_SRC

Now check all your branches

#+BEGIN_SRC 

git branch
git branch -a

#+END_SRC

Merge the branch

#+BEGIN_SRC 

git checkout develop
git merge --no-ff feature/01-DEVAKTHK-CreateMavenProject

#+END_SRC

Delete the branch

#+BEGIN_SRC 

git branch -d feature/01-DEVAKTHK-CreateMavenProject

#+END_SRC

Force push a branch to another

#+BEGIN_SRC 
git push feature/01-DEVAKTHK-CreateMavenProject:develop -f 
#+END_SRC

*** git status and diff

**** Always check the status

#+BEGIN_SRC 
git status

#+END_SRC

**** And add the changes to staging if there are changes

#+BEGIN_SRC 

git add --all

#+END_SRC

or

#+BEGIN_SRC 

git add MyApp.java

#+END_SRC

**** Commit the changes to requisite branch

#+BEGIN_SRC 

git commit -m "here's some changes"

#+END_SRC

or add and commit the changes together
#+BEGIN_SRC 

git commit -am "here's some changes"

#+END_SRC

**** What changed and not yet staged
#+BEGIN_SRC 

git diff

#+END_SRC

**** What are the changes staged compared to original

#+BEGIN_SRC 

git diff --cached

#+END_SRC

**** Lets say we want to revert one file

#+BEGIN_SRC 

git checkout MyApp.java

#+END_SRC
*** git remote


#+BEGIN_SRC 
git remote add origin <repourl>
git pull origin master
#+END_SRC 

or

#+BEGIN_SRC 
git clone <repourl> .
#+END_SRC

Now see what remotes we have

#+BEGIN_SRC 

git remote -v show

#+END_SRC

*** git push current branch to remote

push to the current branch which is checked out

#+BEGIN_SRC 

git push origin HEAD

#+END_SRC

or push a branch provided explicitly

#+BEGIN_SRC 

git push origin develop

#+END_SRC

*** git stash

Once you're in middle of some changes and you want to stash them for a while and come back later do this

#+BEGIN_SRC 

git stash

#+END_SRC

The changes will be stashed and can be seen here

#+BEGIN_SRC 

git stash list

#+END_SRC

Now once you come back later and want to apply the stashed changes again, use this command

- to apply the latest stash

#+BEGIN_SRC 

git stash apply

#+END_SRC

To apply the previous stash

#+BEGIN_SRC 
git stash apply  stash@{1}

#+END_SRC

And to create branch from the stash use this:

#+BEGIN_SRC 

git stash branch feature/2-DEVAKTHK-Testfeature

#+END_SRC

*** git reset master branch
#+BEGIN_SRC 
git checkout --orphan newBranch
git add -A  # Add all files and commit them
git commit
git branch -D master  # Deletes the master branch
git branch -m master  # Rename the current branch to master
git push -f origin master  # Force push master branch to github
git gc --aggressive --prune=all     # remove the old files
#+END_SRC

** setup the git ssh keys

First setup the ssh config to use specific keys for specific hosts:
#+BEGIN_SRC
vi ~/.ssh/config
#+END_SRC

#+BEGIN_SRC 
host bitbucket.com
 HostName bitbucket.com
 IdentityFile ~/.ssh/id_rsa_bitbucket
 User amitthk

host github.com
 HostName github.com
 IdentityFile ~/.ssh/id_rsa_github
 User amitthk

#+END_SRC

Copy over the downloaded keys and setup permissions for them:
#+BEGIN_SRC 
sudo cp ~/download/id_rsa_bitbucket  ~/.ssh/
sudo chown amitthk:amitthk ~/.ssh/id_rsa_bitbucket
sudo chmod 400 ~/.ssh/id_rsa_bitbucket
sudo cp ~/download/id_rsa_github  ~/.ssh/
sudo chown amitthk:amitthk ~/.ssh/id_rsa_github
sudo chmod 400 ~/.ssh/id_rsa_github
#+END_SRC

** git pull all branches
#+BEGIN_SRC 
git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
git fetch --all
git pull --all
git branch -a
 
#+END_SRC

Pull all branches from list of git repo (read list from file params.txt)

#+BEGIN_SRC 
#!/bin/bash

gitpull(){
echo "git clone ${1}@${2}:${3}/${4}.git"
mkdir "${4}"
git clone "${1}@${2}:${3}/${4}.git" "${4}"
cd ${4}
git branch -r | grep -v '\->' | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
git fetch --all
git pull --all
git branch -a
cd ..
}

getall(){
while read x y
do
echo "gitpull git bitbucket.org ${x} ${y}"
gitpull git bitbucket.org ${x} ${y}
done < params.txt
}

#+END_SRC

** gitflow
- Centralized
  - like svn expensive
- Feature branch
  - Central repo
  - feature branch
  - git checkout -b my-feature master
  - while merging - On development branch run this
    - git merge master
    - (resolve any merge conflicts if there are any)
    - git checkout master
    - git merge --no-ff development
  - while merging - on master branch
    - git checkout master
    - git pull origin master
    - git merge test
    - git push origin master
- Gitflow
  - Master, Develop, Release, Hotfix, Feature branches
  - git clone --recursive git://github.com/nvie/gitflow.git
  - install gitflow from repo
  - initiating gitflow
    - git init
    - ls -la
    - git flow
    - git flow init
    - push the branches master and develop
  - add a new feature
    - git clone git@.....
    - git checkout develop
    - git flow feature start
    
** git usefull commands

*** checkout a specifc directory or file from anothe branch
#+BEGIN_SRC 
git fetch upstream
gt checkout "upstream/${branchname}" -- terraform/inventories/hosts
#+END_SRC

*** push changes to a separate branch in upstream

#+BEGIN_SRC 
git add --all

git remote remove upstream || true
git remote add upstream https://${credentialid}@github.com/amitthk/${inventory_repo}

git commit -am "Added local changes to inventory" || true

git fetch upstream

#Merge local to upstream branch or checkout a new branch
git merge -X ours "upstream/${branch_name}" || git checkout -b "${branch_name}"

git merge -x ours "${branch_name}"

git commit -am "Merged the ${branch_name} to terraform state" || true

git push upstream HEAD:${branch_name}

#+END_SRC
