* linux

** linux operations essential

*** hierarchy of environment variables
| System wide   |                               |                                                  |
|               | /etc/environment              | specifically meant for environment variables     |
|               | /etc/env.d/*                  | environment variables, split in multiple files   |
|               | /etc/profile                  | all types of initialization scripts              |
|               | /etc/profile.d/*              | initialization scripts                           |
|               | /etc/bashrc, /etc/bash.bashrc | meant for functions and aliases                  |
| User specific |                               |                                                  |
|               | ~/.bash_profile               | initialization for login (bash-)shells           |
|               | ~/.bashrc                     | initialization for all interactive (bash-)shells |
|               | ~/.profile                    | used for all shells                              |
|               | ~/.cshrc, ~/.zshrc, ~/.tcshrc | similar for non-bash                             |


*** system info

#+BEGIN_SRC 
cat /etc/system-release
lsb_release -d
rpm -qf $(which lsb_release)
uname -r 

#kernel version
cat /proc/version

#options passed to the kernel during boot
cat /proc/cmdline

#block devices
lsblk


#+END_SRC


#+BEGIN_SRC 
#send message to tux
$write tux

#+END_SRC

#+BEGIN_SRC


#multiline message


$cat > message << END
"some message
END

#+END_SRC

#+BEGIN_SRC


$wall < message

#+END_SRC

#+BEGIN_SRC


$shutdown <halt poweroff reboot>
shutdown -h 5 "The system is getting down in 5 min"
$shutdown -c (cancel it)

$halt

$init --help

$ls /run

#last command
$cat !$

#repeat last command argument
# !# is last command. $ is the last command argument
cp /opt/spark-2.3.0-bin-hadoop2.7/conf/spark-env.sh.template !#$.bak

#+END_SRC




*** runlevels
|     Sysvinit | Runlevel                                                  | Systemd Target  Function                                          |
|            0 | runlevel0.target, poweroff.target    System halt/shutdown |                                                                   |
| 1, s, single | runlevel1.target, rescue.target                           | Single-user mode                                                  |
|         2, 4 | runlevel2.target, runlevel4.target, multi-user.target     | User-defined/Site-specific runlevels. By default, identical to 3. |
|            3 | runlevel3.target, multi-user.target                       | Multi-user, non-graphical mode, text console only                 |
|            5 | runlevel5.target, graphical.target                        | Multi-user, graphical mode                                        |
|            6 | runlevel6.target, reboot.target                           | Reboot                                                            |
|    emergency | emergency.target                                          | Emergency mode                                                    |


#+BEGIN_SRC

#who's logged on
$who

#current runlevel - runlevel 5 is graphical target
$who -r

#also current runlevel
$runevel

#current target
systemctl get-default

#list of all targets
systemctl list-units --type=target

#set the default target. graphical/multiple users can logon
systmctl set-default multi-user.target

#or set the default target like this 
systemctl isolate multi-user.target

#or set the default target like this
ln -sf /lib/systemd/system/[desired].target /etc/systemd/system/default.target

#can also be set in the kernel line using below option
systemd.unit=multi-user.target

#here we see that runlevel 3 is emulated by multi-user.target
systemctl isolate multi-user.target
systemctl isolate runlevel3.target
ls -l /usr/lib/systemd/system/runlevel3.target

# rescue.target is runlevel 1 - emergency mode - no networking , only root user

#halt and restart
telinit 0 

#+END_SRC

*** recovery mode - recover lost root password

vi /etc/default/grub

#set GRUB_DISABLE_RECOVERY="false"

grub2-mkconfig -o /boot/grub2/grub.cfg

- grub on the boot menu select an entry and 'e' to edit
#find linux16 line
#remove entry -> rhgb quiet
#add in place -> rd.break enforcing=0

- mount the root file system and change password
switch_root: mount -o remount,rw /sysroot
switch_root: chroot /sysroot
passwd
<change the password>
mount -o remount,ro /sysroot
exit

- login again as root and now restore config
restorecon /etc/shadow
setenforce 1



*** processes

#+BEGIN_SRC


$ps
$man ps
#   - Unix: -
#   - BSD : no dash
#   -  GNU:  --

ps aux
ps -e --forest
pstree
ps
ps -f (full listing)
ps -F (extra full)
ps -l (long listing)
ps -ly
ps -elf (longand full)
ps -elf | grep sshd
ps -p1 -f
echo $$
ps -p $$ -F

cd $$
ls -l cwd
ls -l  exe

cat loadavg (last process id used)
#=====
stty -a (shortcuts for processes)

kill -l  (listing of all kill signals)

kill -term 8537 (ask to close)
kill -sigkill 8537 (force kill)

#=====
pgrep sshd
ps -F -p $(pgrep sshd)

sleep 100&
sleep 100&
pgrep sleep
pkill sleep

top
#=======
free
free -m (megabyte)
free -g
pmap $$
pwdx $$
sudo pwdx $(pgrep sshd)
#======
who
lscpu
cat /proc/uptime
cat /proc/loadavg
watch -n 4 uptime (run the command every 4 seconds)
tload
#======
top -b n1 (batch mode 1 iteration)
top -b n1 > file1
less file1
vmstat
vmstat -S k
vmstat -S m
vmstat 5 3 (5 seconds gap 3 iterations)

#=====
#shared libraries

ldd /usr/bin/ls
ldd /usr/bin/grep
pmap $$
ldd /usr/bin/bash
pwd
pwd -P (actual from the link directoy)

#+END_SRC

** LFCS Essentials
*** Basic Command line
- ctrl shift +
- cd Desktop/
- right ctrl f2 (from gui to console)
- right ctrl f1 (back to gui)
- tty - terminals i am logged in to
- who  (where is root logged on to)
- ip a s
*** Files and directories
-    pwd
-    ls
- type ls - aliases of type 
- ls -a 
- ls -aF
- ctrl+l clear
- /etc  = service configuration directory
- ls -F /etc
symbolic link light colors and @ smbol
- ls -l /etc - long list of files
- ls -lrt - list reverse sorted by date modified
- ls -ld /etc , ls -d (directory details)
  - tty
  - ls -l /dev/pts/1
  - ls -l $(tty)
- block devices
  - lsb
  - lsblk :tree type
  - ls -l /dev/sda
  - ls -l /dev/sda?
  - ls -l /dev/sda*
  - ls -l /dev/sda[12]
  - ls -l /etc/system-devises : reveal the symbolic link
  - cat /etc/redhat-release
  - lsb_release -d
  - ls -l $(which lsb_release)
  - ls -lF $(which lsb_release) : append star * to executables
  - rpm -qf /usr/bin/lsb_release
  - rpm -qf $(which lsb_release)
- Working with files
  - pwd
  - cd Documents/
  - cp /etc/hosts .
  - cat hosts
  - cp /etc/passwd ./passwd
  - cp -i /etc/hosts ./passwd (interactive)
  - mv hosts localhosts
  - rm -i .
- directories
  - cd
  - ls
  - mkdir test
  - ls sales
  - mkdir -p sales/test (create parent)
  - !rm
  - rm -rf sales
  - mkdir one two
  - touch one/fiel{1..5}
  - cp -R one two : copy one and all its contents to two
  - yum install tree
  - tree two
  - rm -rf two
  - mkdir -m 777 d1 (7 is full permission)
  - mkdir -m 700 d2 (user only permission)
  - ls -ld /etc
  - ls -ldi /etc :index entry of the file
  - ls -ldi /etc/. (same as above command. because . is a default file representing etc.)
  - ..  is linked to the parent directory
  - ls -l t1
  - ls -la t1 : show hidden files also
  - echo hello > f1
  - cat f1
  - ln f1 f2 : hard link
  - ln -s f1 f3 : symbolik link
  - ls switches
    - ls -l
    - ls -i
    - ls -lh (human readable)
    - ls -a
    - ls -ltr
    - ls -F
  - type of files
    - Regular files
    - Directories
    - symbolic links
    - block devices (sdb)
    - character devices
    - named pipes
    - sockets (s as the first character)
  - cp, mv, rm
    - -i interactive
    - -r | R  recursion
    - *
    - ?
    - []
  - mkdir
    - -p parent
    - -m mode
*** disk usage

#+BEGIN_SRC 
df

df -H

df /dev/sda
df -h /dev/sdc1
df /data/
df  --output=source,used,avail /data/ #selected fields only
df --o #everything
df -h ### Human format
df -m ### Show output size in one-megabyte
df -k ### Show output size in one-kilobyte blocks (default)

#using inode usage instead of block usage
df -i
df -i -h

#type of each file
df -T
df -T -h
df -T -h /data/
df -t ext3 #Only see ext3 file system
df -x ext2 #exclude ext2
df -a #all filesystems

#+END_SRC

#+BEGIN_SRC 

du
du -h #human readable
du /etc/
du -h /etc/

#summarize
du -s /etc/
du -sh /etc/

#show all files & directories
du -a -h /etc/

#show top 10 directories eating up space
du -a /etc/ | sort -n -r | head -n 10

du -b filename #file bytes


#+END_SRC

#+BEGIN_SRC 
lsblk
lsblk -io KNAME,TYPE,SIZE,MODEL

lshw -class disk

hwinfo --disk

fdisk -l

smartctl -i /dev/sda


 ls /sys/block/* | grep block | grep sd | wc -l

#+END_SRC

**** Permissions
#+BEGIN_SRC 
sudo usermod -a -G www apache
 sudo chown -R apache /var/www
 sudo chgrp -R www /var/www
 sudo chmod 2775 /var/www
 find /var/www -type d -exec sudo chmod 2775 {} \;
 find /var/www -type f -exec sudo chmod 0664 {} \;
 sudo service httpd restart
#+END_SRC
*** Files
find and execute a command on files in directory
#+BEGIN_SRC 
find /etc/ -name  'sshd_config' -exec cp {} {}.bak \;
#+END_SRC

#+BEGIN_SRC 
echo $SSH_C

echo $SSH_CONNECTION  : list of all ssh connections

cat /ect/services
wc -l /etc/services (word count)
less !$  (last argument)
 - page up page down
 - ?sometext

head -n 3 /etc/services : topp 3 lines
tail -n 3 /etc/services : bottom 3


yum list installed | grep kernel
yum list installed | rep ^kernel
sudo yum install np

wc -l !$
cp !$ .
grep server ntp.conf
type grep
grp '\bserver\b' ntp.conf

sudo yum install words
grep -E '^po..ute$' /usr/share/dict/words
grep -E '[aeiou]{5}

#+END_SRC

- sed
#+BEGIN_SRC 
function clean_file {
sed -i '/^#/d;/^$/d' $1
}

#+END_SRC
then clean_file

*** Cleaning up files
echo new >> ntp.ne
diff ntp.conf ntp.new

vi ntp.new <some changes>
diff ntp.conf ntp.new

diff /etc/ntp.conf ntp.conf

*** vi
touch newfile
ls -l newfile
newfile1
stat newfile : statistices of change modify etc
touch -d '10

vimtutor

1G - firlst line
i insert, a appends, I inserts at start of line, A to end of line

d, 2dd, u

*** Grep
- For searching a string in the directory tree recursively :
~grep -rl alvin .

- Search multiple unrelated subdirectories:

~grep -ril alvin /home/cato /htdocs/zenf

- Using egrep recursively - multiple patterns at a time
~egrep -ril 'aja|alvin' .

*** cut

#+BEGIN_SRC 

cut -c2 test.txt #select column of characters from test.txt
cut -c1-3 test.txt
cut -c3- test.txt  #from the 3rd character onwards from lines
cut -c-8 test.txt  #up till 8th character

cut -d':' -f1 /etc/passwd  #select specific field - like from passwd below

#range of fileds and selected fields
grep "/bin/bash" /etc/passwd | cut -d':' -f1-4,6,7

#only when line contains the delimiter
grep "/bin/bash" /etc/passwd | cut -d'|'  -f1

#display all fields except selected
grep "/bin/bash" /etc/passwd | cut -d':' --complement -s -f7

#change output delimeter for display
grep "/bin/bash" /etc/passwd | cut -d':'  -s -f1,6,7 --output-delimiter='#'
grep bala /etc/passwd | cut -d':' -f1,6,7 --output-delimiter=$'\n'

#filter out specific information from ps
ps axu | grep python | sed 's/\s\+/ /g' | cut -d' ' -f2,11-

#+END_SRC

*** Processes and Ports
**** ps

#+BEGIN_SRC 
ps
man ps
ps -e #all processes
ps aux #all processes not assigned to terminals
ps -e --forest #process tree
pstree #tree
ps -f #full listing
ps -F #extra full
ps -l #long listng
ps -ly #resident set size memory used
ps -elf | grep sshd

#filter out specific information from ps
ps axu | grep python | sed 's/\s\+/ /g' | cut -d' ' -f2,11-

#+END_SRC

The proc directory

#+BEGIN_SRC 
cd /proc && ls

ps -p1 -f
ps #prcess id ofmy current shell
echo $$ #my current process id
ps -p $$ -F
cd $$ && pwd && ls -l cwd

cat loadavg #load over the cpu in last times, last process id
#+END_SRC

#+BEGIN_SRC 
ps -p pidlist

ps -eo uname,pid,ppid,nlwp,pcpu,pmem,psr,start_time,tty,time,args

#sort by spec
ps -eo uname,pid,ppid,nlwp,pcpu,pmem,psr,start_time,tty,time,args --sort -pcpu,-pmem  


#skip headers
ps -ef --no-headers --sort -pcpu | sed '5q' | awk ' { print $1, $2, $7, $8 }'

#+END_SRC

**** managing processes
#+BEGIN_SRC 
stty -a #shortcuts for this shell
kill -l #all kill signals
kill 8789 #kill process id 8789
kill -term 8789 #signal 15 default
kill -sigterm 8789
kill -sigkill 8789 #kill theprocess signal 9

#+END_SRC

pgrep and pkill

#+BEGIN_SRC 
pgrep sshd
ps -F -p $(pgrep sshd)
sleep 100& ; sleep 100&
pgrep sleep
pkill sleep
#+END_SRC

sockets

#+BEGIN_SRC 
ss -ntl
#+END_SRC

**** top

~top

select > f > s > escape  for sorting by something

q to quit



**** backgrounding

#+BEGIN_SRC 
sleep 1000&  #background it
sleep 1000 #stuck for 1000 seconds
^Z  #suspends
jobs #jobs in backgrund
stty -a #common shortcuts
jobs
fg #last bacgrund job to fg
fg 2 #the second job to fg

pgrep sleep
ps -F -p $(pgrep sleep)  #give me a long listing of all the sleep processes

pkill sleep

#+END_SRC

Running a process in background and routing logs to a file

~<somecommand> > <somefile> 2>&1 &

**** Important common commands

#+BEGIN_SRC 
lsof -i :port -S
netstat -a | grep port
ps -A
ps -e
ps -aux | less
pgrep -u root sshd
 top -b -n1 > /tmp/process.log
pstree
# Threads
ps -eLF
ps axms
# Security
ps -eo euser,ruser,suser,fuser,f,comm,label
ps axZ
ps -eM


#+END_SRC

ports

#+BEGIN_SRC 
lsof -i :8200
netstat -a
netstat -lptu


#+END_SRC

Open ports

#+BEGIN_SRC 
sudo yum -y install iptables-services
sudo yum -y install firewalld

#if iptables
sudo iptables -I INPUT -p tcp -m tcp --dport 80 -j ACCEPT

sudo firewall-cmd --zone=public --add-port=8080/tcp --permanent
sudo firewall-cmd --reload
firewall-cmd --list-all

#enable a service
sudo firewall-cmd --zone=public --add-service=httpd --permanent

#+END_SRC

#+BEGIN_SRC 
#unzip the vault binary to /usr/local/bin

#create a config file 

#add the user
sudo useradd -r -d /var/lib/vault -s /bin/nologin vault

#give the ownership to this directory to vault
sudo install -o vault -g vault -m 750 -d /var/lib/vault

sudo chown -R vault:vault /usr/share/vault

#create the config file in below location and update permissions
sudo chmod 640 /usr/share/vault/server.hcl

sudo nano /etc/systemd/system/vault.service

#+END_SRC

Create the service file for vault

sudo nano /etc/systemd/system/vault.service
#+BEGIN_SRC 
[Unit]
Description=a tool for managing secrets
Documentation=https://vaultproject.io/docs/
After=network.target
ConditionFileNotEmpty=/usr/share/vault/server.hcl

[Service]
User=vault
Group=vault
ExecStart=/usr/local/bin/vault server -config=/usr/share/vault/server.hcl
ExecReload=/usr/local/bin/kill --signal HUP $MAINPID
CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK
Capabilities=CAP_IPC_LOCK+ep
SecureBits=keep-caps
NoNewPrivileges=yes
KillSignal=SIGINT

[Install]
WantedBy=multi-user.target


#+END_SRC
*** Logs
#+BEGIN_SRC 
dmesg | less
tail -f -n 5 /var/log/syslog
less /var/log/messages
more -f /var/log/messages
cat /var/log/messages
tail -f /var/log/messages
grep -i error /var/log/messages
awk '{print $1}' /var/log/httpd/access_log* | sort | uniq -c | sort


#+END_SRC

*** Shell scripts
- Debug 
~bash x <scriptname>

- Shebang
#+BEGIN_SRC 
#!/bin/bash

echo "Hello there!"

exit 0
#+END_SRC

**** REad input

#+BEGIN_SRC 
read INPUT_NAME
echo "Hello $INPUT_NAME"
#+END_SRC 

***** Script params
hello.sh Amit Sumit Aneka

$0 $1 $2

$* All params without scipt name
$# count the params without script name

***** if
#+BEGIN_SRC 
#!/bin/bash

if (($# <1))
  then
    echo "Usage : $0 <name>"
    exit 1
fi

#+END_SRC

***** case

#+BEGIN_SRC 

case $1 in
  "directory")
    find /etc/ -maxdepth 1 -type d
    ;;
  "link")
    find /etc/ -maxdepth 1 -type d
    ;;
  *)
    echo "usage: $0 directory | link"
    ;;
esac


#+END_SRC

***** string condition If

#+BEGIN_SRC 
#!/bin/bash

if [[ ! -d $1 ]] #Square bracket for string condition, (NOT = exclaimation) first param is a directory
  then
    echo "Usage : $0 <directory>"
    exit 1
fi
case $1 in
  "directory")
    find /etc/ -maxdepth 1 -type d
    ;;
  "link")
    find /etc/ -maxdepth 1 -type d
    ;;
  *)
    echo "usage: $0 directory | link"
    ;;
esac

#+END_SRC

***** for loop

****** Create a fle in all directories

#+BEGIN_SRC 
for f in $(ls -b); do echo "---" > "${f}main.yml";done
#+END_SRC

****** Run a command in loop

#+BEGIN_SRC 
for i in $(cat hostlist); do echo $i; ssh -i /c/Apps/Tools/keys/all_keys/all_keys/cdhstack_admin.pem centos@$i 'sudo yum history redo last'; done
#+END_SRC

****** Open firewall for all hosts in hostlist
#+BEGIN_SRC
for i in $(cat hostlist); do echo $i; ssh -i ./cdhstack_admin.pem centos@$i 'sudo firewall-cmd --zone=trusted --add-source=172.31.0.0/16 --permanent; firewall-cmd --reload'; donefor i in $(cat hostlist); do echo $i; ssh -i /c/Apps/Tools/keys/all_keys/all_keys/cdhstack_admin.pem centos@$i 'sudo firewall-cmd --zone=trusted --add-source=172.31.0.0/16 --permanent; firewall-cmd --reload'; done
for i in $(cat hostlist); do echo $i; ssh -i ./cdhstack_admin.pem centos@$i 'sudo firewall-cmd --zone=dmz --add-port=6930-9000/tcp --permanent;sudo firewall-cmd --reload'; done
#+END_SRC

****** Open a list of ports for hosts in hostlist
#+BEGIN_SRC 
for i in $(cat hostlist); do echo $i; ssh -i /c/Apps/Tools/keys/all_keys/all_keys/cdhstack_admin.pem centos@$i 'sudo firewall-cmd --zone=dmz --add-port=6930-9000/tcp --permanent;sudo firewall-cmd --reload'; done
#+END_SRC

#+BEGIN_SRC 

for u in $*

do 
  useradd u
  echo Password1 | passwd --stdin $u
  passwd -e $u
done

#+END_SRC

#+BEGIN_SRC 
for file in ($ls)

do 
 [! -f file] && continue
 LA = $(stat -c %x $file | cut -d " " -f1)
 echo "$file is $(du -b $file) bytes and was last accessed on $LA"
done

#+END_SRC

#+BEGIN_SRC 
#!/bin/bash -x

COUNT=10

while ((count > 0))

do 
 echo -e "$COUNT \c"
 sleep 1
 (( count-- ))
 
done

#+END_SRC

 
**** repeat a command on multipe files in directory
#+BEGIN_SRC 
for f in /etc/httpd/conf.d/*.conf; do mv $f $f.bak ;done
#+END_SRC
*** yum
#+BEGIN_SRC 
yum -y install firefox
yum -y remove firefox

yum list openssh
yum list openssh-4.3p2
yum search vsftpd
yum info firefox
yum list | less
yum list installed | less
yum provides /etc/httpd/conf/httpd.conf #which package this file belongs to
yum check-update
yum update
yum grouplist
yum groupinstall 'MySQL Database'
yum groupupdate 'DNS Name Server'
yum groupremove 'DNS Name Server'

yum repolist
yum repolist all
yum --enablerepo=epel install phpmyadmin
yum shell
yum clean all
yum history
#+END_SRC

**** managing yum repos

#+BEGIN_SRC 
su -l
yum <tab> <tab>  #all yum commands from root shell

cd /etc/yum.repos.d/
yum info epel-release
rpm -ql epel-release

less CentosBase-repo
yum repolist all

#+END_SRC

***** make our own yum repo

~vi local.repo


#+BEGIN_SRC 
#/etc/yum.repos.d/local.repo
[CentOS7]
name=CentOS 7.2 Local Network
baseurl=http://192.168.0.27/centos7/
enabled=1
gpgcheck=0

#+END_SRC

**** yum cache

#+BEGIN_SRC 
yum makecache
yum clean <tab> <tab>
yum clean all
#+END_SRC

**** manage source RPM

#+BEGIN_SRC 
cd /etc/yum.repos.d/
grep ^enabled CentOS-Sources.repo

sed -i 's/enabled=0/enabled=1/' CentOS-Sources.repo
yum repolist

#some packages
yum install -y yum-utils
yumdownloader --source zsh
yum install ncurses-devel
rpm -i zsh-5<tab>.rpm
#+END_SRC

Install zsh from the tarball rpm

#+BEGIN_SRC
cd rpmbuild/SOURCES
tar -xjf zsh-<tab>.bz2
cd zsh-<tab>
./configure
make
make install
#+END_SRC

*** puppet

#+BEGIN_SRC 
yum install puppet
puppet --version
facter
facter | grep hostname
#+END_SRC

**** puppet manifests

#+BEGIN_SRC 
cd /etc/puppet/
mkdir manifests
cd /etc/puppet/manifests/
#+END_SRC

creating a manifest /etc/puppet/manifests/mysite.pp

#+BEGIN_SRC 
node "master1.pys3viewer.mywire.org" {
    file { '/etc/yum.repos.d/local.repo':
            ensure => "file",
            owner  => "root",
            group => "wheel",
            mode => "644",
            content => "[Mylocal]
name=CentOS mY local repo
baseurl=http://192.168.0.220/centos
enabled=1
gpgcheck=0"
    }
}

#+END_SRC

#+BEGIN_SRC 
puppet apply /etc/puppet/manifests/mysite.pp
#+END_SRC

** sed, awk, grep
#+BEGIN_SRC 
declare -f | grep ‘^[a-z_]’

# create a backup while commenting original file
d -i.commented ‘/^#/d;/^$/d’ /etc/ntp.conf

#get mac address from network interface
ifconfig eth0|awk -F":"'/HWaddr/{ print $3 $4 $5 $6 $7 }'


#+END_SRC

*** grep - global regular expressions and print

- transmission data from ifconfig
  - ifconfig eth0 | grep RX
- pam cofig that include a specific module
  - grep pam_nologin /etc/pam.d/*
- count the number of cpu cores in host
  - grep -c name /proc/


**** ls only the files

#+BEGIN_SRC 
ls -l | egrep -v '^d'
#+END_SRC

**** parse csv

~vi parsecsv.sh

#+BEGIN_SRC 
#!/bin/bash
OLDIFS=$IFS; IFS=","
while read product price quantity
do
echo -e "\e[1;33m$product =========\e[0m\n\
Price : \t $price \n\
Quantity : \t $quantity \n"
done < $1
IFS=$OLDIFS
#+END_SRC

~./parsecsv.sh tools | grep -A2 hammer

- -A specified how many lines after match to include

**** regular expressions
| ANCHORS                                      | symbol     |
| Start of string                              | ^          |
| End of string                                | $          |
| String starts with abc                       | ^abc       |
| String ends with 4                           | 4$         |
| RANGES                                       |            |
| Any letter                                   | '[A-Za-z]' |
| Lowercase or underscore                      | '[a-z_]'   |
| Any digit                                    | '[0-9]'    |
| Matches 3,4 or 9                             | '[349]'    |
| BOUNDARIES                                   |            |
| Whitespace                                   | \s         |
| Matches "file system"                        | \ssystem   |
| Word boundary                                | \b         |
| Matches "file system" and file-system        | \bsystem   |
| QUANTIFIERS                                  | -          |
| Zero or more times (eg u zero or more times) | u*         |
| One or more times (eg u one or more times)   | u+         |
| Zero or once                                 | u?         |
| Exactly 3 times                              | u{3}       |
|                                              |            |


e.g valid SSN numbers
-v reverses the search, -E enhanced regex 
grep -vE '\b[0-9]{3}-[0-9]{2}-[0-9]{4}\b' employees

*** sed
| PRINT command                                                        | e.g                                                              |
| Print the pattern space                                              | sed ' p ' /etc/passwd                                            |
| Suppress standrd output only matched lines display                   | sed -n ' p ' /etc/passwd                                         |
| range - display only those matched lines                             | sed -n '1,3 p ' /etc/passwd                                      |
| Substitute command - first char after s represents delimeter         | sed ‘ [range] s/<string>/<replacement>/ ’ /etc/passwd            |
| Looking for lines start with gretchen replace /bin/bash with /bin/sh | sed ‘ /^gretchen/ s@/bin/bash@/bin/sh@ ‘ /etc/passwd             |
| Append                                                               | sed ‘ /^server 3/ a server ntp.example.com’ /etc/ntp.conf        |
| Insert                                                               | sed ‘ /^server 0/ i server ntp.example.com’ /etc/ntp.conf        |
| Delete                                                               | sed ‘ /^server\s[0-9]\.ubuntu/ d’ /etc/ntp.conf                  |
| Using a file ntp.sed with below multiple sed expr. on file ntp.conf  | sed -f ntp.sed /etc/ntp.conf                                     |
| Remote edit using SSH. Backup the file with .bak as well             | ssh -t user@server sudo sed -i.bak -f /tmp/ntp.sed /etc/ntp.conf |
| Substitution groups and uppercase first field                        | sed ‘s@\([^,]*\)@\U\1@’ employees                                |
| subs group and uppercase first lowercase second field                | sed ‘s@\([^,]*\),\([^,]*\)@\U\1\L\2@’ employees                  |
|                                                                      |                                                                  |

Multiple sed expressions

#+BEGIN_SRC 
sed ‘ {
/^server 0/ i ntp.example.com
/^server\s[0-9]\.ubuntu/ d
} ‘ /etc/ntp.conf
#+END_SRC

.....

*** awk

| Execute awk cmds from BEGIN block  | BEGIN |
| read input line                    | loop  |
| execute awk commands on a line     | loop  |
| repeat if not end of file          | loop  |
| Eecute awk commands from END block | END   |

**** syntax
#+BEGIN_SRC 
BEGIN {awk-commands}
/pattern/ {awk-commands}
END {awk-commands}
#+END_SRC

e.g
#+BEGIN_SRC 
awk 'BEGIN{printf "Sr No\tName\tSub\tMarks\n"} {print} marks.txt END{printf "done"}'

#+END_SRC

**** running awk

Directly
#+BEGIN_SRC 
#awk [options] file ...
awk '{print}' marks.txt 
#+END_SRC

via a awk file

#+BEGIN_SRC 
#awk [options] -f file ....
awk -f command.awk marks.txt
#+END_SRC

**** variables

#+BEGIN_SRC 
awk -v name=Jerry 'BEGIN{printf "Name = %s\n", name}'
#+END_SRC

**** patterns
The default behavior is print each line so following two are same

/alluxio/ is a pattern here

#+BEGIN_SRC 
ps -elf | awk '/alluxio/ {print $0}'
ps -elf | awk '/alluxio/'
#+END_SRC


***** printing the ps elf sepecific fields
#+BEGIN_SRC 
ps -elf | awk '/a/ {print $3 "\t" $4}'
#+END_SRC

**** awk built in variables

***** ARGC
#+BEGIN_SRC 
awk 'BEGIN {print "Arguments =", ARGC}' One Two Three Four
#+END_SRC

***** ARGV
#+BEGIN_SRC 
awk 'BEGIN { 
   for (i = 0; i < ARGC - 1; ++i) { 
      printf "ARGV[%d] = %s\n", i, ARGV[i] 
   } 
}' one two three four
#+END_SRC

***** conversion format CONVFMT

#+BEGIN_SRC 
awk 'BEGIN { print "Conversion Format =", CONVFMT }'
#+END_SRC

***** ENVIRON
#+BEGIN_SRC 
awk 'BEGIN { print ENVIRON["USER"] }'
#+END_SRC

***** FILENAME
#+BEGIN_SRC 
awk 'END {print FILENAME}' marks.txt
#+END_SRC

***** FS (field separator - default value is space)
#+BEGIN_SRC 
awk 'BEGIN {print "FS = " FS}' | cat -vte
#+END_SRC

***** NF (number of fields in current record)
#+BEGIN_SRC 
echo -e "One Two\nOne Two Three\nOne Two Three Four" | awk 'NF > 2'
#+END_SRC

***** RS
It represents (input) record separator and its default value is newline.

Example
#+BEGIN_SRC 
[jerry]$ awk 'BEGIN {print "RS = " RS}' | cat -vte

#+END_SRC
On executing this code, you get the following result −

Output

RS = $
$

***** RSTART
It represents the first position in the string matched by match function.

Example

#+BEGIN_SRC 
[jerry]$ awk 'BEGIN { if (match("One Two Three", "Thre")) { print RSTART } }'

#+END_SRC

On executing this code, you get the following result −

Output

9

***** SUBSEP
It represents the separator character for array subscripts and its default value is \034.

Example

#+BEGIN_SRC 
[jerry]$ awk 'BEGIN { print "SUBSEP = " SUBSEP }' | cat -vte

#+END_SRC
On executing this code, you get the following result −

Output

SUBSEP = ^\$
$0
It represents the entire input record.

Example

~awk '{print $0}' marks.txt~

***** $n nth field in current record
#+BEGIN_SRC 

ls -la | awk '{print $2 \t $4}'
#+END_SRC

***** run awk command only on  files in directory

#+BEGIN_SRC 
ls -l | egrep -v '^d' | awk '/.*.ldif/ {print "ls -la " $9}' | /bin/bash
#+END_SRC

**** examples

vi users.awk

#+BEGIN_SRC 
BEGIN { FS=“:” ; print “Username” }
{ print $1 }
END { print “Total users = “ NR }
#+END_SRC

awk -f users.awk /etc/passwd

where uid greater than 499
#+BEGIN_SRC 
BEGIN { FS=“:” ; print “Username” }
$3 > 499 { print $1 }
END { print “Total users = “ NR }
#+END_SRC

Simplify the employees file uppercase the first lowercase the second field using awk

~awk -F”,” { print toupper($1), tolower($2), $3 } employees

Last Log Simplification
/usr/bin/lastlog

#+BEGIN_SRC 
!(/Never logged in/ || /^Username/ || /^root/) {
count++
if ( NF == 8 )
printf "%8s %2s %3s %4s\n", $1,$5,$4,$8
else
printf "%8s %2s %3s %4s\n", $1,$6,$5,$9}
END {print "====================“
print "Total Number of Users Processed: ", count}
#+END_SRC


**** xml file refining
xml.awk

#+BEGIN_SRC 
BEGIN { RS="\n\n"}
$0 ~ search { print }
#+END_SRC

Usage:
awk -f xml.awk search=example vh.conf

**** Log files refining using awk

#+BEGIN_SRC 
# print first field
awk ‘ { print $1 } ‘ access.log

#+END_SRC

**** count unique access by client
#+BEGIN_SRC 
BEGIN { FS=" ";print "Log access" }
{ ip[$1]++ }
END { for (i in ip)
print i, " has accessed ", ip[i], " times."
}
#+END_SRC

**** maximum browser count

#+BEGIN_SRC 
BEGIN { FS=" "; print "Most Popular Browser" }
{ browser[$12]++ }
END { for ( b in browser)
if ( max < browser[b] ) {
max = browser[b];
maxbrowser = b; }
print "Most access was from ", maxbrowser, " and ", max, "
times." }
#+END_SRC

*** notes sed awk grep
 
Grep awk sed

note:
!$ (last argument)
!cat  (last cat command)

grep user /etc/passwd

declare -f

declare -f | grep '^[a-z_]'

declare -f quote

grep --version

sed -n 'p' /etc/passwd   (prints whole)

sed -n '1,5 p' /etc/passwd  (match pattern, first five lines)

sed -n ' /^user/  p' /etc/passwd (match pattern starting with user)

# deleteing with sed (d)

sed ' /^#/ d' /etc/ntp.conf

sed ' /^#/ d ; /^$/ d' /etc/ntp.conf

# Now actually execute it:

(.bak also creates a backup)
sed  -i.bak ' /^#/ d ; /^$/ d' /etc/ntp.conf


# awk

print contents

awk  ' { print } ' /etc/ntp.conf

extra stuff at beginning and end
awk '  BEGIN { print "filename.conf" } { print } END { print NR } /etc/fliename.conf


awk  ' { print NR, $0 } ' /etc/ntp.conf

ifconfig eth0 | awk -F ":"  '/HWaddr/{ print $3 $4 $5 $6 $7 }'


====
Grep

ifconfig eth0 | grep RX
grep pam_nologin /etc/pam.d/*
grep -c name /proc/cpuinfo

netstat -tnpa | grep 'ESTABLISHED.*sshd'

------

case insensitive
ifconfig eth0 | grep -i rx

where the configurations for pam_login module stored in
grep pam_login /etc/pam.d/*

grep -c name /proc/cpuinfo
cat !$  (Last argument)

./parsecsv.sh tools | grep -A2 hammer
alias


** utilities

*** netcat

Netcat can be used to write to a port so that applications can listen to the context:

#+BEGIN_SRC
#linux 
nc -l 8990

#windows
nc -L -p 8990
#+END_SRC

** force reinstall an app recreate files
#+BEGIN_SRC 
#I need to check which rpm modified the files i was trying to restore
rpm -qf /etc/kerberos

#This will list down the rpms which modified above directory

#Now i will reinstall bot of the rpm s which modified my file
yum reinstall krb5-libs-1.15.1-37.el7_6.x86_64
yum reinstall krb5-server-1.15.1-37.el7_6.x86_64
#+END_SRC
** sshd allow only key ssh on specific ports

vi /etc/ssh/sshd_config

#+BEGIN_SRC 
Port 22
Port 60022

#..
#..


#at end
Match LocalPort 60022
PasswordAuthentication no
RSAAuthentication yes
#+END_SRC

** resize volume grow partition

Debian resize the partition to size of disk

#+BEGIN_SRC 
fdisk /dev/mmcblk0

Command (m for help): p

Disk /dev/mmcblk0: 15.8 GB, 15804137472 bytes
4 heads, 16 sectors/track, 482304 cylinders, total 30867456 sectors
Units = sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disk identifier: 0x34605ba5

        Device Boot      Start         End      Blocks   Id  System
/dev/mmcblk0p1           40960      124927       41984   83  Linux
/dev/mmcblk0p2          124928     7170047     3522560   83  Linux

Command (m for help): d
Partition number (1-4): 2

Command (m for help): n
Partition type:
   p   primary (1 primary, 0 extended, 3 free)
   e   extended
Select (default p): p
Partition number (1-4, default 2): 2
First sector (2048-30867455, default 2048): 124928
Last sector, +sectors or +size{K,M,G} (124928-30867455, default 30867455):
Using default value 30867455

Command (m for help): w

Theen quit (command q), reboot. You will then be able to use resize:

resizefs /dev/root
#+END_SRC

Centos / Amazon ec2 grow the partition


#+BEGIN_SRC 
df -u
#list the block devices
lsblk

#find out which partition need to grow on which disk

#then grow the partition number to resized value
sudo growpart /dev/xvdf 1

#extend the filesystem to new volume capacity

sudo resize2fs /dev/xvda1

#if it is xfs
sudo yum install xfsprogs
sudo xfs_growfs -d /

sudo file -s /dev/xvd*

for i in `cat h`; do ssh -i ./cdhstack_admin.pem centos@$i sudo df -h; done
for i in `cat h`; do ssh -i ./cdhstack_admin.pem centos@$i sudo sudo yum install -y xfsprogs; done
for i in `cat h`; do ssh -i ./cdhstack_admin.pem centos@$i sudo resize2fs /dev/xvda1; done
for i in `cat h`; do ssh -i ./cdhstack_admin.pem centos@$i sudo xfs_growfs -d /; done

for i in `cat h`; do ssh -i ./cdhstack_admin.pem centos@$i sudo shutdown -r 0 ; done

#+END_SRC

** SSL certificates import , trust store and pem file

*** Generate ssl cert
#+BEGIN_SRC
openssl genrsa -des3 -out server.key 2048
openssl rsa -in server.key -out server.key
openssl req -new -key server.key -out server.csr
openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
#+END_SRC

~keytool -import -trustcacerts -keystore /usr/java/jdk1.8.0_181-amd64/jre/lib/security/cacerts  -storepass changeit -noprompt -alias mycert -file atksv.mywire.org.crt~

Import this file to a keystore

~keytool -import -alias nexuscalias -file atksv.mywire.org.crt -noprompt -storepass changeit  -keystor
e atksv.mywire.org.jks~

*** Keystore (your credentials) , truststore (others credentials)
Import a cert to truststore
#+BEGIN_SRC 
keytool -import -alias nexuscalias -trustcacerts certfile.cer -keystore /home/ec2-user/keystore.jks

#+END_SRC

Adding CA Certificate to truststore
#+BEGIN_SRC

keytool -v -alias mavensev -import -file certfile.cer -keystore keystore.jks


#+END_SRC

**** Maven params

#+BEGIN_SRC 
MAVEN_OPTS="-Xmx512m -Djavax.net.ssl.trustStore=trust.jks \
                     -Djavax.net.ssl.trustStorePassword=  \
                     -Djavax.net.ssl.keyStore=/home/directory/mycertificate.p12 \
                     -Djavax.net.ssl.keyStoreType=pkcs12 \
                     -Djavax.net.ssl.keyStorePassword=XXXXXX"
#+END_SRC

**** maven mvn command with truststore

#+BEGIN_SRC 
mvn install -Djavax.net.ssl.trustStore=trust1.jks -Djavax.net.ssl.trustStorePassword=changeit spring-boot:run
#+END_SRC

**** create a trust store from url cert

#+BEGIN_SRC 

echo -n | openssl s_client -showcerts -connect www.google.com:443 | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > /tmp/temp_cert.crt

openssl x509 -in /tmp/temp_cert.crt -text

keytool -import -trustcacerts -keystore cacerts -storepass changit -noprompt -alias mavencert -file /tmp/temp_cert.crt

#+END_SRC

**** pem file from cert file

#+BEGIN_SRC 
openssl x509 -in /tmp/temp_cert.crt -outform PEM
#+END_SRC

or if it is a der file
#+BEGIN_SRC 
openssl x509 -inform DER -in /tmp/temp_cert.crt -outform PEM
#+END_SRC

*** Jenkins self signed  ssl cert
#+BEGIN_SRC 
    #This gist is related to blog post https://mohitgoyal.co/2017/02/08/securing-your-jenkins-environment-and-configure-for-auditing/

    # Generate certificate csr
    openssl req -new > new.ssl.csr

    # Create a key file for generating certificate
    openssl rsa -in privkey.pem -out new.cert.key

    # Create a csr file using the key file for 635 days
    openssl x509 -in new.ssl.csr -out new.cert.cert -req -signkey new.cert.key -days 365

    # Creates intermediate pkcs12 file
    openssl pkcs12 -export -out jenkins_keystore.p12 -passout 'pass:password' \
     -inkey new.cert.key -in new.cert.cert -name jenkinsci.com

    # Create Java Keystore file
    keytool -importkeystore -srckeystore jenkins_keystore.p12 \
     -srcstorepass 'password' -srcstoretype PKCS12 \
     -srcalias jenkinsci.com -deststoretype JKS \
     -destkeystore jenkins_keystore.jks -deststorepass 'password' \
     -destalias jenkinsci.com

    # Move keystore file to Jenkins and assign Jenkins service account permissions for same
    cd /var/lib/jenkins
    mkdir keystore
    cp ~/jenkins_keystore.jks /var/lib/jenkins/keystore/
    chown -R jenkins.jenkins keystore/
    chmod 700 keystore/

    # Edit variables as mentioned in the blog post 

    vi /etc/sysconfig/jenkins

# UPdate JENKINS_PORT="-1"
# JENKINS_HTTPS_PORT="8880"
# JENKINS_HTTPS_KEYSTORE="/var/lib/jenkins/ssl/jenkins_keystore.jks"
#+END_SRC

Via route tables
#+BEGIN_SRC
    # Configure kernel to allow port forwarding
    sysctl -w net.ipv4.ip_forward=1

    #allow forwarding to localhost on eth0
    sysctl -w net.ipv4.conf.eth0.route_localnet=1

    # Configure iptables for port forwarding
    # for remote connections
    iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 443 -j DNAT \
    --to-destination 127.0.0.1:8443
    iptables -A FORWARD -i eth0 -m state --state NEW -m tcp -p tcp \
    -d 127.0.0.1 --dport 8443 -j ACCEPT

    # for localhost connections
    iptables -t nat -A OUTPUT -p tcp --dport 443 -d 127.0.0.1 \
    -j DNAT --to-destination 127.0.0.1:8443

    # Restart Jenkins service
    systemctl stop jenkins.service
systemctl start jenkins.service
#+END_SRC
*** socks5 proxy

#+BEGIN_SRC 

ssh -D 8123 -f -C -q -N myuser@myserver

#+END_SRC

foxy proxy config
#+BEGIN_SRC 
<?xml version="1.0" encoding="UTF-8"?>
<foxyproxy>
    <proxies>
        <proxy name="aws-socks-proxy" id="2322596116" notes="" fromSubscription="false" enabled="true" mode="manual" selectedTabIndex="2" lastresort="false" animatedIcons="true" includeInCycle="true" color="#0055E5" proxyDNS="true" noInternalIPs="false" autoconfMode="pac" clearCacheBeforeUse="false" disableCache="false" clearCookiesBeforeUse="false" rejectCookies="false">
            <matches>
                <match enabled="true" name="*ec2*.amazonaws.com*" pattern="*ec2*.amazonaws.com*" isRegEx="false" isBlackList="false" isMultiLine="false" caseSensitive="false" fromSubscription="false" />
                <match enabled="true" name="*.ec2.internal*" pattern="*.ec2.internal*" isRegEx="false" isBlackList="false" isMultiLine="false" caseSensitive="false" fromSubscription="false" />
            </matches>
            <manualconf host="localhost" port="8132" socksversion="5" isSocks="true" username="" password="" domain="" />
        </proxy>
    </proxies>
</foxyproxy>
#+END_SRC

** detect java java and se JAVA_HOME in /etc/profile.d/jdk.sh
#+BEGIN_SRC 
export JAVA_HOME=$(dirname $(dirname $(readlink $(readlink $(which javac)))))
#+END_SRC
** maven
Write maven wrapper to package build

#+BEGIN_SRC 
export MAVEN_HOME=/opt/apache-maven-3.5.4
export JAVA_HOME=/usr/java/jdk1.8.0_181-amd64/
/opt/apache-maven-3.5.4/bin/mvn "$@"
#+END_SRC

#+BEGIN_SRC 
#if above file is ~/mvn
~/mvn clean package
#+END_SRC

** kubernetes
#+BEGIN_SRC 

minikube start --vm-driver "hyperv" --hyperv-virtual-switch "Minikube Virtual Switch" --v=7 --alsologtostderr 
kubectl get pods -n kube-system
minikube stop
#+END_SRC
** reset ssh keys
#+BEGIN_SRC 
 ssh-keygen -R <server>
#+END_SRC

- If this doesn't work -> 
#+BEGIN_SRC 
vi ~/.ssh/known_hosts
#+END_SRC


and delete the correstonding host entry

** Create user

User without home
#+BEGIN_SRC 
useradd demouser

#+END_SRC

Add a home directory to existing user

#+BEGIN_SRC 

mkdir -p /home/demouser
chown newuser:newuser /home/demouser
usermod -d /home/demouser demouser

#+END_SRC

Create a new User with home directory

#+BEGIN_SRC 

useradd -m demouser

#+END_SRC

Make the user sudo(er)

#+BEGIN_SRC 

usermod -aG sudo demouser

#+END_SRC

** Rsync from/to remote server

- rsync a remote file to local
#+BEGIN_SRC 
rsync -v -e ssh pi@192.168.0.102:~/atksv/inbox.org /tmp

#+END_SRC

- backup samba config
#+BEGIN_SRC 
rsync /etc/samba/smb.conf administrator@192.168.0.109:/Users/administrator/Documents/src
rsync /etc/httpd/conf/httpd.conf
administrator@192.168.0.109:/Users/administrator/Documents/src
rsync /etc/hostname
administrator@192.168.0.109:/Users/administrator/Documents/src
rsync /etc/hosts
administrator@192.168.0.109:/Users/administrator/Documents/src
rsync /etc/network/interfaces
administrator@192.168.0.109:/Users/administrator/Documents/src
 rsync /etc/samba/smb.conf administrator@192.168.0.109:/Users/administrator/Documents/src



cp /etc/apache2/sites-enabled/000-default.conf ~/000-default.conf.bak1

rsync ~/000-default.conf.bak1 -rtvpl administrator@192.168.0.109:/Users/administrator/Documents/src


#+END_SRC

** linux command line monitoring performance
 - 1. Top – Linux Process Monitoring
 - 2. VmStat – Virtual Memory Statistics
 - 3. Lsof – List Open Files
 - 4. Tcpdump – Network Packet Analyzer
 - 5. Netstat – Network Statistics
 - 6. Htop – Linux Process Monitoring
 - 7. Iotop – Monitor Linux Disk I/O
 - 8. Iostat – Input/Output Statistics
 - 9. IPTraf – Real Time IP LAN Monitoring
 - 10. Psacct or Acct – Monitor User Activity
 - 11. Monit – Linux Process and Services Monitoring
 - 12. NetHogs – Monitor Per Process Network Bandwidth
 - 13. iftop – Network Bandwidth Monitoring
 - 14. Monitorix – System and Network Monitoring
 - 15. Arpwatch – Ethernet Activity Monitor
 - 16. Suricata – Network Security Monitoring
 - 17. VnStat PHP – Monitoring Network Bandwidth
 - 18. Nagios – Network/Server Monitoring
 - 19. Nmon: Monitor Linux Performance
 - 20. Collectl: All-in-One Performance Monitoring Tool
** getting list of all hostnames in lan
  // unknown was orangepi
 nmap -sP 192.168.1.* 
** etcd

#+BEGIN_SRC 
etcdctl set /name Amit

etcdctl get /name

etcdctl rm /name

etcdctl mkdir /all-services

etcdctl set /all-services/app-server localhost:8080

etcdctl ls /all-services
#+END_SRC

*** Watching the etcdctl recursively for changes

~etcdctl watch --recursive /all-services~

#+BEGIN_SRC 
[Unit]
Description=MyContainers
After=docker.service
Requires=docker.service
After=mycontainer_config.service
Requires=mycontainer_config.service


[Service]
TimeoutStartSec=0
ExecStartPre=-/usr/bin/docker kill %p
ExecStartPre=-/usr/bin/docker rm %p
ExecStartPre=/usr/bin/docker pull busybox
ExecStart=/usr/bin/docker run --name %p --env-file=/etc/mycontainer_config.env busybox /bin/sh -c "while true;do echo Hello $NAME; sleep 1; done"

[Install]
WantedBy=multi-user.target
#+END_SRC



#+BEGIN_SRC 
[Unit]
Description=Generates /etc/mycontainer_config.env file
After=etc2.service
Requires=etcd2.service
After=fleet.service
Requires=fleet.service


[Service]
Type=oneshot
ExecStart=/usr/bin/sh -c "/usr/bin/echo NAME=$(etcdctl get /name) > /etc/mycontainer_config.env"
#+END_SRC

** setup samba 
  sudo apt-get install samba samba-common-bin

 sudo mkdir -m 1777 /data-share

*** backup the samba config file
 sudo mv /etc/samba/smb.conf /etc/samba/smb.conf.$(date +%F)

*** cleanup and create the fresh smb.conf
  sudo grep -ve ^# -ve '^;' -ve ^$ smb.conf.2016-03-08 > smb.conf

*** Go into bash and add the data share directory to the end of smb.conf
 sudo bash
 sudo nano smb.conf

 ==> add the following data
 [data]
         comment = Data share
         path = /data-share
         browseable = yes
         read only = no

 ==> test the config
 testparm

 ==> add samba user
 sudo smbpasswd -a pi


** setup samba
1. Install:
sudo apt-get update
sudo apt-get install samba samba-common-bin


2. Create share directory:
sudo mkdir -m 1777 /data-share

/******

    1: sets the sticky bit. This set on a directory ensures that users can only delete files they own.
    7: sets RWX read , write and execute for the user owner
    7: sets RWX read , write and execute for the group owner
    7: sets RWX read , write and execute for others

******/


3. Backup smb.conf
sudo mv /etc/samba/smb.conf /etc/samba/smb.conf.$(date +%F)

4. Now copy back the trim down smb.conf with share directory information

sudo bash
grep -ve ^# -ve ‘^;’ -ve ^$ smb.conf.2015-12-07   >  smb.conf

5.  Edit /etc/samba/smb.conf .Add the share information :

#+BEGIN_SRC 
[data]
        comment = Data share
        path = /data-share
        browseable = yes
        read only = no

#+END_SRC

6. Test config:
testparm

7. Restart samba:-
service samba restart

if that doesn't work:

sudo /etc/init.d/smbd start

8. Create samba users:-

smbpasswd -a root
smbpasswd -a pi

** static ip
- backup interfaces file
#+BEGIN_SRC 
sudo cp /etc/network/interfaces /etc/network/interfaces.bak

#+END_SRC

-  updat the /etc/network/interfaces file

 sudo nano /etc/network/interfaces

-> If this line is there - comment it out
iface eth0 inet dhcp

-> Update the static ip
#+BEGIN_SRC 
 # The loopback interface
 auto lo
 iface lo inet loopback
 auto eth0
 iface eth0 inet static
 #your static IP (required)
 address 192.168.1.118  
 #your gateway IP
 gateway 192.168.1.1
 netmask 255.255.255.0 (required)
 #your network address "family"
 network 192.168.1.0
 broadcast 192.168.1.255


#+END_SRC

- restart the network service
sudo /etc/init.d/networking restart

OR

sudo /etc/init.d/networking reload

- check the status in ifconfig

** setup hostname
 sudo nano /etc/hosts
 sudo nano /etc/hostname

 sudo reboot




** connect to ec2

 ssh -i 'Box Sync'/Docs/amitthk_aws_keypair.pem  ec2-user@ec2-52-36-166-157.us-west-2.compute.amazonaws.com

** docker mysql

*** create busybox repository:-
 sudo docker run -v /var/lib/mysql --name=mysql_datastore -d busybox
 echo 'My Datastore'

*** use the repository and start mysql
 sudo docker run --name d-mysql -e MYSQL_ROOT_PASSWORD=ditstudent --volumes-from mysql_datastore  -d mysql

*** install wordpress and point it to above mysql instance. also set the port accordingly
 sudo docker run --link=d-mysql:mysql -p 8983:80 -d wordpress

** nginx on docker
 $ docker run --name amitthk-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx


** apt-get de-install broken packages

*** Approach 1
 Make a backup of /var/lib/dpkg/status:

 sudo cp /var/lib/dpkg/status /var/lib/dpkg/status.bkup

 Open /var/lib/dpkg/status:

 sudo nano /var/lib/dpkg/status

 Search through the file for any reference to that package name (i.e. linux-headers-3.0.0-19) and CAREFULLY delete that entry. Don't delete anything else. Save the file and quite.

 Do sudo apt-get update.

*** Approach 2

 If you get nowhere with any of the other offerings I've used this in the past

 dpkg --remove --force-remove-reinstreq
 From the dpkg manual

 remove-reinstreq: Remove a package, even if it's broken
 So run:

 sudo dpkg --remove --force-remove-reinstreq  linux-headers-3.0.0-19


 https://askubuntu.com/questions/122699/how-to-remove-package-in-bad-state-software-center-freezes-no-synaptic/122737#122737?newreg=4bfa6d05048c478a814a2a80dd8c109c


** kernel modules

*** list the modules:-
 uname -r
*** should match the libraries:-
 ls /lib/modules

*** Else compile the latest
 sudo aptitude install linux-image-rpi-rpfv linux-headers-rpi-rpfv



*** httpd

 httpd -V
 sudo nano /etc/httpd/conf/httpd.conf
 sudo nano /etc/httpd/logs/error_log
 sudo service httpd restart

 sudo chown -R www-data:www-data /var/www/wordpress
 sudo chown -R www-data:www-data /var/www/vhosts/blog



** fdisk resize partition

From the command line or a terminal window enter the following

sudo fdisk /dev/mmcblk0
then type p to list the partition table

you should see two partitions. if you look in the last column labeled System you should have

Linux

make a note of the start number for partiton 2, you will need this later. though it will likely still be on the screen (just in case).

next type d to delete a partition.

You will then be prompted for the number of the partition you want to delete. In the case above you want to delete both the Linux and Linux swap partitions.

So type 2

Now you can resize the main partition.

type n to create a new partition.

This new partition needs to be a primary partition so type p.

Next enter 2 when prompted for a partition number.

You will now be prompted for the first sector for the new partition. Enter the start number from the earlier step (the Linux partition)

Next you will be prompted for the last sector you can just hit enter to accept the default which will utilize the remaining disk space.

Type w to save the changes you have made.

Next reboot the system with the following command:

sudo reboot
once the system has reboot and you are back at the commandline enter the following command:

sudo resize2fs /dev/mmcblk0p2

** docker on raspberry pi

 wget https://downloads.hypriot.com/docker-hypriot_1.10.2-1_armhf.deb
 dpkg -i docker-hypriot_1.10.2-1_armhf.deb

#+BEGIN_SRC 
curl -fsSL get.docker.com -o get-docker.sh && sh get-docker.sh

sudo groupadd docker

sudo gpasswd -a pi docker

sudo apt-get update

apt-get install -y python3-dev python3-pip libffi-dev build-essential

sudo apt-get install -y python python-pip openssl libssl-dev

pip install pynacl>=1.0.1

sudo pip install docker-compose

#+END_SRC


** redmine on raspberry pi

 http://www.tylerforsythe.com/2015/04/install-redmine-onto-raspberry-pi-2-this-is-the-tutorial-you-want/

** mysql and apache2 on raspberrypi/linux
 sudo apt-get install apache2 mysql-server

*** connect to mysql
  mysql -u root mydatabase
 or
  mysql -u root

 mysql> show databases;
 use redmine_default;
 show tables;


*** apache 2
**** backup the default config
 sudo cp /etc/apache2/sites-enabled/000-default.conf
 /etc/apache2/sites-enabled/000-default.conf.bak

**** edit the default config to include subsite

 sudo nano /etc/apache2/sites-enabled/000-default.conf

 ## Add this
#+BEGIN_SRC 

 <Directory /var/www/html/redmine>
     RailsBaseURI /redmine
     PassengerResolveSymlinksInDocumentRoot on
 </Directory>

#+END_SRC

**** touch the gemfile
 sudo touch /usr/share/redmine/Gemfile.lock
 sudo chown www-data:www-data /usr/share/redmine/Gemfile.lock

**** add smlink to your site
 sudo ln -s /usr/share/redmine/public /var/www/redmine

**** change owner - allow apache the access to your subsite
  sudo chown -R www-data:www-data /var/www/redmine


**** restart apache server
 sudo service apache2 restart

**** mod passenger config if needed
 sudo nano /etc/apache2/mods-available/passenger.conf

 ## Add this line
 PassengerDefaultUser www-data







** setup noip/ run a script at startup

*** setup noip
mkdir /home/pi/noip
cd /home/pi/noip
wget http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz
tar vzxf noip-duc-linux.tar.gz
cd noip-2.1.9-1
sudo make
sudo make install



*** Create a script in the /etc/init.d/<name of your script>


*** Enter the contents of the script
#+BEGIN_SRC 
 #! /bin/sh
 # /etc/init.d/noip 

 ### BEGIN INIT INFO
 # Provides:          noip
 # Required-Start:    $remote_fs $syslog
 # Required-Stop:     $remote_fs $syslog
 # Default-Start:     2 3 4 5
 # Default-Stop:      0 1 6
 # Short-Description: Simple script to start a program at boot
 # Description:       A simple script from www.stuffaboutcode.com which will start / stop a program a boot / shutdown.
 ### END INIT INFO

 # If you want a command to always run, put it here

 # Carry out specific functions when asked to by the system
 case "$1" in
   start)
     echo "Starting noip"
     # run application you want to start
     /usr/local/bin/noip2
     ;;
   stop)
     echo "Stopping noip"
     # kill application you want to stop
     killall noip2
     ;;
   *)
     echo "Usage: /etc/init.d/noip {start|stop}"
     exit 1
     ;;
 esac

 exit 0

#+END_SRC


*** make script executable
 sudo chmod 755 /etc/init.d/startnoip

**** Test starting the program
 sudo /etc/init.d/startnoip start

**** Test stopping the program
 sudo /etc/init.d/startnoip stop

*** Register script to be run at start-up

  sudo update-rc.d startnoip defaults

*** If you every want to deregister this script from running at startup
 sudo update-rc.d -f  startnoip remove


** configuring httpd Lamp server from aws docs

*** Add the user

 ls -l /var/www

 sudo groupadd www

 sudo usermod -a -G www ec2-user

*** Logout and check the groups again
 exit
 groups (will show ec2-user wheel www)


 sudo chown -R root:www /var/www

 find /var/www -type d -exec sudo chmod 2775 {} \;

 find /var/www -type f -exec sudo chmod 0664 {} \;


*** Now grab & configure the wordpress


 wget https://wordpress.org/latest.tar.gz

 tar -xzf latest.tar.gz

 ls


*** Oh yes mysql - must create the database for wordpress installation first

 sudo service mysqld start

 mysql -u root -p

 CREATE USER 'wordpress-user'@'localhost' IDENTIFIED BY 'your_strong_password';

 CREATE DATABASE `wordpress-db`;

 GRANT ALL PRIVILEGES ON `wordpress-db`.* TO "wordpress-user"@"localhost";

 FLUSH PRIVILEGES;

 exit

*** edit the wp-config file inside the wordpress folder
 cp wp-config-sample.php wp-config.php

 nano wp-config.php

**** Here update the DB_NAME, DB_USER, DB_PASSWORD etc. values. be careful of the quotes.

*** wordpress access settings

 //allow permalinks 

 sudo vim /etc/httpd/conf/httpd.conf

**** User permissions
 #+BEGIN_SRC 
sudo usermod -a -G www apache

 sudo chown -R apache /var/www

 sudo chgrp -R www /var/www

 sudo chmod 2775 /var/www

 find /var/www -type d -exec sudo chmod 2775 {} \;

 find /var/www -type f -exec sudo chmod 0664 {} \;

 sudo service httpd restart
 
 #+END_SRC


 [[http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hosting-wordpress.html#create_user_and_database]]

** Installing redmine

 Install ruby and ruby on rails firs
 https://github.com/bvmake/WhosGotWhat/wiki/Installing-Rails-on-free-Amazon-EC2-Micro

 sudo yum install readline-devel git make zlib-devel sqlite-devel.x86_64 gcc g++ svn

 gem install rails

 http://stackoverflow.com/questions/3939914/how-to-install-redmine-on-fedora-11-linux/7427751#7427751

** Install jupyter
#+BEGIN_SRC 
sudo apt-get install -y python-dev
sudo pip install --upgrade pip
sudo pip install jupyter
sudo apt-get install -y python-seaborn python-pandas
sudo apt-get install -y ttf-bitstream-vera

#+END_SRC

Run with the command jupyter notebook

** local install python3 and jupyter
#+BEGIN_SRC 
# To allow for building python ssl libs
yum install openssl-devel
# Download the source of *any* python version
cd /usr/src
wget https://www.python.org/ftp/python/3.6.2/Python-3.6.2.tar.xz
tar xf Python-3.6.2.tar.xz 
cd Python-3.6.2

# Configure the build w/ your installed libraries
./configure

#need to do this because ModuleNotFoundError: No module named '_sqlite3' pysqlite2 errors
yum install -y sqlite-devel
./configure --enable-loadable-sqlite-extensions

#make it
make

# Install into /usr/local/bin/python3.6, don't overwrite global python bin
make install

#this is required for pip . pip3 is default configured with ssl
yum install openssl-devel

#now install jupyter notebook
yum install -y jupyter

#+END_SRC
Now running the jupyter notebook (as different user) will only allow you on localhost
su hadoop
jupyter notebook

but to allow it from network here's what u got to do
#+BEGIN_SRC 
jupyter notebook --generate-config

vi /home/hadoop/.jupyter/jupyter_notebook_config.py

#run this command to create the password for you notebook
jupyter notebook password

jupyter notebook password
#Enter password:  ****
#Verify password: ****
#[NotebookPasswordApp] Wrote hashed password to /Users/you/.jupyter/jupyter_notebook_config.json

#+END_SRC

Now you can run your notebook with 

~jupyter notebook~

YOu can also prepare the hashed password
#+BEGIN_SRC 
In [1]: from notebook.auth import passwd
In [2]: passwd()
Enter password:
Verify password:
Out[2]: 'sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed'

#+END_SRC
Update this:

c.NotebookApp.password = u'sha1:67c9e60bb8b6:9ffede0825894254b2e042ea597d771089e11aed'


** Reinstalling ruby

 http://stackoverflow.com/questions/23184819/rails-new-app-or-rails-h-craps-out-with-cannot-load-such-file-io-console

** Install tightvncserver

You'll be able to control it as though you were working on the Raspberry Pi itself.

On your Pi (using a monitor or via SSH), install the TightVNC package:

sudo apt-get install tightvncserver
Next, run TightVNC Server which will prompt you to enter a password and an optional view-only password:

tightvncserver
Start a VNC server from the terminal: This example starts a session on VNC display one (:1) with full HD resolution:

vncserver :1 -geometry 1920x1080 -depth 24
Note that since by default an X session is started on display zero, you will get an error in case you use :0.

Since there are now two X sessions running, which would normally be a waste of resources, it is suggested to stop the displaymanager running on :0 using

service lightdm stop
Now, on your computer, install and run the VNC client:

On a Linux machine install the package xtightvncviewer:
sudo apt-get install xtightvncviewer

*** shortcut script
to remember it:

Create a file containing the following shell script:
#+BEGIN_SRC 

#!/bin/sh
vncserver :1 -geometry 1920x1080 -depth 24 -dpi 96

#+END_SRC
Save this as vnc.sh (for example)

Make the file executable:

chmod +x vnc.sh
Then you can run it at any time with:

./vnc.sh
If you prefer your mouse pointer in the VNC client to appear as an arrow as opposed to an "x" which is default, in ./vnc/xstartup add the following parameter to xsetroot:

-cursor_name left_ptr

*** run at boot

To run at boot:

Log into a terminal on the Pi as root:

sudo su
Navigate to the directory /etc/init.d/:

cd /etc/init.d/
Create a new file here containing the following script:
#+BEGIN_SRC 

#! /bin/sh
# /etc/init.d/vncboot

### BEGIN INIT INFO
# Provides: vncboot
# Required-Start: $remote_fs $syslog
# Required-Stop: $remote_fs $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: Start VNC Server at boot time
# Description: Start VNC Server at boot time.
### END INIT INFO

USER=pi
HOME=/home/pi

export USER HOME

case "$1" in
 start)
  echo "Starting VNC Server"
  #Insert your favoured settings for a VNC session
  su - $USER -c "/usr/bin/vncserver :1 -geometry 1280x800 -depth 16 -pixelformat rgb565"
  ;;

 stop)
  echo "Stopping VNC Server"
  /usr/bin/vncserver -kill :1
  ;;

 *)
  echo "Usage: /etc/init.d/vncboot {start|stop}"
  exit 1
  ;;
esac

exit 0

#+END_SRC
Save this file as vncboot (for example)

Make this file executable:

chmod 755 vncboot
Enable dependency-based boot sequencing:

# update-rc.d lightdm remove
update-rc.d vncboot defaults

*** Vnc lincense copy in gmail

** add repository jessie main to sources.list raspbian 
# Edit the sources.list
sudo nano /etc/apt/sources.list

# Add Debian 8 "Jessie" repository
deb http://http.debian.net/debian/ jessie main contrib non-free


** dlink dwa 123 d1 drivers
After messing arround for hours wasting time with wrong drivers,
here's te place where if got the drivers for this usb dongle dwa 123 d1
http://www.dlinkla.com/dwa-123

** missing GPG Keys fix
sudo apt-get install debian-keyring debian-archive-keyring
sudo apt-get update

** backup create image of raspbian sd card on mac/linux

http://computers.tutsplus.com/articles/how-to-clone-raspberry-pi-sd-cards-using-the-command-line-in-os-x--mac-59911

# carefully check the device location
sudo diskutil list

# create image
sudo dd if=/dev/rdisk1 of=~/Desktop/pi.img bs=1m

# or zip it on while u write
sudo dd if=/dev/rdisk1 bs=1m | gzip > ~/Desktop/pi.gz

# in above case of zipped image the restore becomes something like below
# unmount the disk first but do not eject the card
diskutil unmountDisk /dev/disk1 
gzip -dc ~/Desktop/pi.gz | sudo dd of=/dev/rdisk1 bs=1m




** setup proftpd  ftp server
https://www.howtoforge.com/tutorial/proftpd-installation-on-debian-and-ubuntu/

apt-get install proftpd openssl

proftpd -v

addgroup ftpgroup

adduser newuser  -shell /bin/false -home /ftpshare
Adding user 'newuser' ...
Adding new group 'newuser' (1002) ...
Adding new user 'newuser' (1001) with group `srijan' ...
Creating home directory `/ftpshare' ...
Copying files from `/etc/skel' ...
Enter new UNIX password: <--ftppassword
Retype new UNIX password: <--ftppassword
passwd: password updated successfully
Changing the user information for newuser
Enter the new value, or press ENTER for the default<--ENTER
    Full Name []: <--ENTER
    Room Number []: <--ENTER
    Work Phone []: <--ENTER
    Home Phone []: <--ENTER
    Other []: <--ENTER
Is the information correct? [Y/n] <--Y

adduser newuser ftpgroup

chmod -R 1777 /ftpshare/

nano /etc/proftpd/proftpd.conf

# Make changes like as shown
[...]
UseIPv6 off
[...]
<Global>
    RootLogin	off
    RequireValidShell off
</Global>

DefaultRoot  ~

<Limit LOGIN>
    DenyGroup !ftpgroup
</Limit>


service proftpd restart


# if you get mod_tls_memcache/0.1: notice: unable to register
# 'memcache' SSL session cache: Memcache support not enabled

nano /etc/proftpd/modules.conf

[...]
#LoadModule mod_tls_memcache.c
[...]

*** Multiple directories config

chmod -R 1777 /home/amit/ftpshare/
adduser amit ftppublicgroup


**** emacs /etc/proftpd/proftpd.conf
#+BEGIN_SRC 

Include /etc/proftpd/conf.d/
<Global>
        RootLogin off
        RequireValidShell off
</Global>

DefaultRoot ~

<Limit LOGIN>
        Order Allow,Deny
        AllowGroup ftpgroup
        AllowGroup ftppublicgroup
        DenyAll
</Limit>

<Directory /ftpshare>
# Umask 022 is a good standard umask to prevent new files and dirs                                                  
# (second parm) from being group and world writable.                                                                
#  Umask                                022  022                                                                    
         <Limit ALL>
            Order Allow,Deny
            AllowGroup ftpgroup
            DenyAll
         </Limit>
 </Directory>

<Directory /home/amit/ftpshare>
# Umask 022 is a good standard umask to prevent new files and dirs                                                  
# (second parm) from being group and world writable.                                                                
#  Umask                                022  022                                                                    
         <Limit ALL>
            Order Allow,Deny
            AllowGroup ftppublicgroup
            DenyAll
         </Limit>
 </Directory>
 

#+END_SRC

**** service proftpd restart

** Writing orangepi image from mac
 http://rayhightower.com/blog/2015/11/27/orange-pi-mini-2-setup-for-mac-os-x/

#+BEGIN_SRC 
 diskutil list
 diskutil unmountDisk /dev/disk1
 sudo dd if=Lubuntu_1404_For_OrangePi2-mini2_v0_8_0_.img of=/dev/disk1 bs=1m

#+END_SRC




** dotnet issues

 GPG Pub_Key missing

*** Here are MONO Keys
  sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys
  3FA7E0328081BFF6A14DA29AA6A19B38D3D831EFD
  echo "deb http://jenkins.mono-project.com/repo/debian sid main" | sudo tee /etc/apt/sources.list.d/mono-jenkins.list


*** Here are dotnet core keys

  #+BEGIN_SRC 
sudo sh -c 'echo "deb [arch=amd64] http://apt-mo.trafficmanager.net/repos/dotnet/ trusty main" > /etc/apt/sources.list.d/dotnetdev.list'

  sudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893
  
  #+END_SRC

** postgresql reset password
#+BEGIN_SRC
su -
psql -U postgres

SHOW hba_file;

\q
 
vi /var/lib/pgsql/9.4/data/pg_hba.conf

# add the line
# local   all         postgres                          trust

systemctl list-units --type service
service postgresql-9.4 restart
#+END_SRC

trust - anyone who can connect to the server is authorized to access the database

peer - use client's operating system user name as database user name to access it.

md5 - password-base authentication

#+BEGIN_SRC 
su -
psql -U postgres
alter user postgres with password 'd1t$t4d3nt';
create database openproj;
create user openprojadm with password 'one2three4';
grant all privileges on database openproj to openprojadm;

SHOW hba_file;

\q


#+END_SRC


** postgresql open port

~vi /etc/postgresql/9.5/main/postgresql.conf~

Add this
~listen_addresses = '*'\~

~vi /etc/postgresql/9.5/main/pg_hba.conf~

Add this

#+BEGIN_SRC 
host all all  ::1/128  md5
host all postgres 127.0.0.1/32 md5
#host  all  all 0.0.0.0/0 md5
#hostnossl  all  all  0.0.0.0/0  trust
#+END_SRC



** Jenkins server initial setup

#+BEGIN_SRC 
sudo apt-get install openjdk-8-jdk -y
sudo apt-get install openjdk-8-jre -y

wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -
echo deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list
sudo apt-get update
sudo apt-get install jenkins -y

sudo apt-get update
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository    "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-get install docker-ce -y

sudo apt-get update
sudo apt-get install git -y
sudo apt-get install python -y
sudo apt-get install software-properties-common -y
sudo apt-add-repository ppa:ansible/ansible
sudo apt-get update
sudo apt-get install ansible -y
sudo apt-get install python-pip -y
pip install awscli --upgrade --user
sudo apt-get install python-software-properties

sudo apt-get install curl -y
curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
sudo apt-get install nodejs 
#+END_SRC
** http
v1.1 1997
v1.0 1990s
*** v1.1
- Messaging syntax and routing RFC 7230
- Semantix and content RFC 7231
- Conditional requests RFC 7232
- Range Requests RFC 7233
- Caching RFC 7234
- Authentication RFC 7235
- Authentication Scheme Registrations RFC 7236
- Method Registrations RFC 7237

Caching 
requests -> Reverse proxy with caching -> load balancer -> api

- Expiration caching
Authorized request should use to avoid another user to sniff stale data.
  - Expires header
  - Cache-Control header  max-age=3600, s-maxage=1200 (shared cache of proxy)
  - Validation caching
    - Etag: "<some versioning string>"
      1) Client sends current etag
      2) Proxy responds header only 304: Not modified
      3) Client safe to use
      4) Another request: last modified changed - 202 Header with body returned from server
      5) Client uses the new body
** python test postgresql locally can connect
write the file pgtest.py

#+BEGIN_SRC 
import psycopg2

def pg_test():

    try:
        conn = psycopg2.connect("dbname='mypydb' user='sa' host='localhost' password='paxxword' connect_timeout=1 ")
        conn.close()
        return True
    except:
        return False
#+END_SRC

Go to python and run it like
#+BEGIN_SRC 
python
>> import pgtest
>> pgtest.pg_test()
>> exit()
#+END_SRC
** Install oracle java
Download the oracle java from:
~http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html~

Scp the tar to target machine
~scp -i mykey.pem ./jdk-8u5-linux-x64.tar.gz  atk@somedomain.ddns.net:~/~

On target machine unpack it to /opt/jdk

~tar -zxf jdk-8u5-linux-x64.tar.gz -C /opt/jdk~

Set Oracle JDK as default JVM

~update-alternatives --install /usr/bin/java java /opt/jdk/jdk1.8.0_05/bin/java 100~
~update-alternatives --install /usr/bin/javac javac /opt/jdk/jdk1.8.0_05/bin/javac 100~

** Install Android Sdk

Download and unzip in /opt/

#+BEGIN_SRC 
export ANDROID_HOME=/opt/android-sdk-linux

wget http://dl.google.com/android/android-sdk_r24.2-linux.tgz
tar -xvf android-sdk_r24.2-linux.tgz
mv android-sdk-linux /opt/
#+END_SRC

Allow permissions to jenkins

#+BEGIN_SRC 
sudo chown jenkins:jenkins /opt/android-sdk-linux/
#+END_SRC

Accept the licenses

#+BEGIN_SRC 
sudo su jenkins
/opt/android-sdk-linux/tools/android update sdk --no-ui
#+END_SRC

Set path

#+BEGIN_SRC 
export PATH=${PATH}:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$ANDROID_HOME/build-tools/25.0.2/
source /etc/profile
#+END_SRC

** Vagrant provision EC2

Courtesy : https://blog.scottlowe.org/2016/09/15/using-vagrant-with-aws/

- first of all install vagrant
- vagrant plugin install vagrant-aws
- vagrant plugin install vagrant-winnfsd
- vagrant box add aws-dummy https://github.com/mitchellh/vagrant-aws/raw/master/dummy.box



- Crate AWS access key id and secret key
  - aws mgmt console
  - name > my security credentials > access keys
  - generate access keys and download
-   Create SSH Keypair
  -  Ec2 console
  -  Network and Security
  -  Keypair download pem

Write the vagrantfile 

#+BEGIN_SRC 

require "vagrant-aws"

Vagrant.configure("2") do |config|

  config.vm.box = "aws-dummy"
  config.vm.network "private_network", ip:"192.168.90.20", type: "dhcp"
  
  config.vm.provider "aws" do |aws, override|

    aws.access_key_id = "dfasdfsdaf"
    aws.secret_access_key = "fdsfdsafasddfsafdasdsfasfs"
    aws.keypair_name = "mykeypairname"

    aws.ami = "ami-fc5ae39f"
    aws.region = "ap-southeast-1"
    aws.instance_type = "t2.micro"
    aws.security_groups = ["default"]

    override.ssh.username = "ubuntu"
    override.ssh.private_key_path = "C:\\Apps\\Tools\\aws\\mykeypairname.pem"
  end
end
#+END_SRC


** install ddclient dynamic dns update

~sudo yum install -y ddclient

edit the file /etc/ddclient.conf

#+BEGIN_SRC 
# ddclient configuration for Dynu
#
# /etc/ddclient.conf
daemon=60                                                    # Check every 60 seconds.
syslog=yes                                                   # Log update msgs to syslog.
mail=root                                                    # Mail all msgs to root.
mail-failure=root                                            # Mail failed update msgs to root.
pid=/var/run/ddclient.pid                                    # Record PID in file.                                      
use=web, web=checkip.dynu.com/, web-skip='IP Address'        # Get ip from server.
server=api.dynu.com                                          # IP update server.
protocol=dyndns2                        
login=myusername                                             # Your username.
password=YOURPASSWORD                                        # Password or MD5/SHA256 of password.
MYDOMAIN.DYNU.COM                                            # List one or more hostnames one on each line.
#MYDOMAIN.COM
#+END_SRC

~sudo service ddclient restart

** merged
*** linux essentials LFCS
    
**** command line
***** Basic Command line
- ctrl shift +
- cd Desktop/
- right ctrl f2 (from gui to console)
- right ctrl f1 (back to gui)
- tty - terminals i am logged in to
- who  (where is root logged on to)
- ip a s
***** Working with directories
-    pwd
-    ls
- type ls - aliases of type 
- ls -a 
- ls -aF
- ctrl+l clear
- /etc  = service configuration directory
- ls -F /etc
symbolic link light colors and @ smbol
- ls -l /etc - long list of files
- ls -lrt - list reverse sorted by date modified
- ls -ld /etc , ls -d (directory details)
  - tty
  - ls -l /dev/pts/1
  - ls -l $(tty)
- block devices
  - lsb
  - lsblk :tree type
  - ls -l /dev/sda
  - ls -l /dev/sda?
  - ls -l /dev/sda*
  - ls -l /dev/sda[12]
  - ls -l /etc/system-devises : reveal the symbolic link
  - cat /etc/redhat-release
  - lsb_release -d
  - ls -l $(which lsb_release)
  - ls -lF $(which lsb_release) : append star * to executables
  - rpm -qf /usr/bin/lsb_release
  - rpm -qf $(which lsb_release)
- Working with files
  - pwd
  - cd Documents/
  - cp /etc/hosts .
  - cat hosts
  - cp /etc/passwd ./passwd
  - cp -i /etc/hosts ./passwd (interactive)
  - mv hosts localhosts
  - rm -i .
- directories
  - cd
  - ls
  - mkdir test
  - ls sales
  - mkdir -p sales/test (create parent)
  - !rm
  - rm -rf sales
  - mkdir one two
  - touch one/fiel{1..5}
  - cp -R one two : copy one and all its contents to two
  - yum install tree
  - tree two
  - rm -rf two
  - mkdir -m 777 d1 (7 is full permission)
  - mkdir -m 700 d2 (user only permission)
  - ls -ld /etc
  - ls -ldi /etc :index entry of the file
  - ls -ldi /etc/. (same as above command. because . is a default file representing etc.)
  - ..  is linked to the parent directory
  - ls -l t1
  - ls -la t1 : show hidden files also
  - echo hello > f1
  - cat f1
  - ln f1 f2 : hard link
  - ln -s f1 f3 : symbolik link
  - ls switches
    - ls -l
    - ls -i
    - ls -lh (human readable)
    - ls -a
    - ls -ltr
    - ls -F
  - type of files
    - Regular files
    - Directories
    - symbolic links
    - block devices (sdb)
    - character devices
    - named pipes
    - sockets (s as the first character)
  - cp, mv, rm
    - -i interactive
    - -r | R  recursion
    - *
    - ?
    - []
  - mkdir
    - -p parent
    - -m mode
  - 
***** Files
echo $SSH_C

echo $SSH_CONNECTION  : list of all ssh connections

cat /ect/services
wc -l /etc/services (word count)
less !$  (last argument)
 - page up page down
 - ?sometext

head -n 3 /etc/services : topp 3 lines
tail -n 3 /etc/services : bottom 3


yum list installed | grep kernel
yum list installed | rep ^kernel
sudo yum install np

wc -l !$
cp !$ .
grep server ntp.conf
type grep
grp '\bserver\b' ntp.conf

sudo yum install words
grep -E '^po..ute$' /usr/share/dict/words
grep -E '[aeiou]{5}


- sed
function clean_file {
sed -i '/^#/d;/^$/d' $1
}

then clean_file

****** Cleaning up files
echo new >> ntp.ne
diff ntp.conf ntp.new

vi ntp.new <some changes>
diff ntp.conf ntp.new

diff /etc/ntp.conf ntp.conf

***** vi
touch newfile
ls -l newfile
newfile1
stat newfile : statistices of change modify etc
touch -d '10

vimtutor

1G - firlst line
i insert, a appends, I inserts at start of line, A to end of line

d, 2dd, u

***** Bash shortcuts
- Working With Processes
 Use the following shortcuts to manage running processes.

 Ctrl+C: Interrupt (kill) the current foreground process running in in the terminal. This sends the SIGINT signal to the process, which is technically just a request—most processes will honor it, but some may ignore it.
 Ctrl+Z: Suspend the current foreground process running in bash. This sends the SIGTSTP signal to the process. To return the process to the foreground later, use the fg process_name command.
 Ctrl+D: Close the bash shell. This sends an EOF (End-of-file) marker to bash, and bash exits when it receives this marker. This is similar to running the exit command.

- Controlling the Screen
 The following shortcuts allow you to control what appears on the screen.

 Ctrl+L: Clear the screen. This is similar to running the “clear” command.
 Ctrl+S: Stop all output to the screen. This is particularly useful when running commands with a lot of long, verbose output, but you don’t want to stop the command itself with Ctrl+C.
 Ctrl+Q: Resume output to the screen after stopping it with Ctrl+S.

- Moving the Cursor
 Use the following shortcuts to quickly move the cursor around the current line while typing a command.

 Ctrl+A or Home: Go to the beginning of the line.
 Ctrl+E or End: Go to the end of the line.
 Alt+B: Go left (back) one word.
 Ctrl+B: Go left (back) one character.
 Alt+F: Go right (forward) one word.
 Ctrl+F: Go right (forward) one character.
 Ctrl+XX: Move between the beginning of the line and the current position of the cursor. This allows you to press Ctrl+XX to return to the start of the line, change something, and then press Ctrl+XX to go back to your original cursor position. To use this shortcut, hold the Ctrl key and tap the X key twice.

- Deleting Text
 Use the following shortcuts to quickly delete characters:

 Ctrl+D or Delete: Delete the character under the cursor.
 Alt+D: Delete all characters after the cursor on the current line.
 Ctrl+H or Backspace: Delete the character before the cursor.

- Fixing Typos
 These shortcuts allow you to fix typos and undo your key presses.

 Alt+T: Swap the current word with the previous word.
 Ctrl+T: Swap the last two characters before the cursor with each other. You can use this to quickly fix typos when you type two characters in the wrong order.
 Ctrl+_: Undo your last key press. You can repeat this to undo multiple times.

- Cutting and Pasting
 Bash includes some basic cut-and-paste features.

 Ctrl+W: Cut the word before the cursor, adding it to the clipboard.
 Ctrl+K: Cut the part of the line after the cursor, adding it to the clipboard.
 Ctrl+U: Cut the part of the line before the cursor, adding it to the clipboard.
 Ctrl+Y: Paste the last thing you cut from the clipboard. The y here stands for “yank”.

- Capitalizing Characters
 The bash shell can quickly convert characters to upper or lower case:

 Alt+U: Capitalize every character from the cursor to the end of the current word, converting the characters to upper case.
 Alt+L: Uncapitalize every character from the cursor to the end of the current word, converting the characters to lower case.
 Alt+C: Capitalize the character under the cursor. Your cursor will move to the end of the current word.

- Tab Completion
 Tab: Automatically complete the file, directory, or command you’re typing.

- Working With Your Command History

 How to Use Your Bash History in the Linux or macOS Terminal
 You can quickly scroll through your recent commands, which are stored in your user account’s bash history file:

 Ctrl+P or Up Arrow: Go to the previous command in the command history. Press the shortcut multiple times to walk back through the history.
 Ctrl+N or Down Arrow: Go to the next command in the command history. Press the shortcut multiple times to walk forward through the history.
 Alt+R: Revert any changes to a command you’ve pulled from your history if you’ve edited it.
 Bash also has a special “recall” mode you can use to search for commands you’ve previously run:

 Ctrl+R: Recall the last command matching the characters you provide. Press this shortcut and start typing to search your bash history for a command.
 Ctrl+O: Run a command you found with Ctrl+R.
 Ctrl+G: Leave history searching mode without running a command.



*** getting list of all hostnames in lan
 // unknown was orangepi
nmap -sP 192.168.1.* 

*** setup samba 
 sudo apt-get install samba samba-common-bin

sudo mkdir -m 1777 /data-share

**** backup the samba config file
sudo mv /etc/samba/smb.conf /etc/samba/smb.conf.$(date +%F)

**** cleanup and create the fresh smb.conf
   sudo grep -ve ^# -ve '^;' -ve ^$ smb.conf.2016-03-08 > smb.conf

**** Go into bash and add the data share directory to the end of smb.conf
sudo bash
sudo nano smb.conf

==> add the following data
[data]
        comment = Data share
        path = /data-share
        browseable = yes
        read only = no

==> test the config
testparm

==> add samba user
sudo smbpasswd -a pi

*** setup hostname
sudo nano /etc/hosts
sudo nano /etc/hostname

sudo reboot

*** connect to ec2

ssh -i 'Box Sync'/Docs/amitthk_aws_keypair.pem  ec2-user@ec2-52-36-166-157.us-west-2.compute.amazonaws.com

***  docker

***** installed docker
sudo yum update
sudo yum install -y docker
docker -v

***** start docker
sudo service docker start
ps
ps aux|grep docker
sudo service docker status

sudo docker run hello-world

***** check docker ip
Firstly list your machines:
$ docker-machine ls

Then select one of the machines (the normal default one started is default) and:
$ docker-machine ip default



***** install mysql

****** create busybox repository:-
sudo docker run -v /var/lib/mysql --name=mysql_datastore -d busybox
echo 'My Datastore'

****** use the repository and start mysql
sudo docker run --name d-mysql -e MYSQL_ROOT_PASSWORD=ditstudent --volumes-from mysql_datastore  -d mysql

****** install wordpress and point it to above mysql instance. also set the port accordingly
sudo docker run --link=d-mysql:mysql -p 8983:80 -d wordpress

****** nginx on docker
$ docker run --name amitthk-nginx -v /some/content:/usr/share/nginx/html:ro -d nginx




**** apt-get de-install broken packages

***** Approach 1
Make a backup of /var/lib/dpkg/status:

sudo cp /var/lib/dpkg/status /var/lib/dpkg/status.bkup

Open /var/lib/dpkg/status:

sudo nano /var/lib/dpkg/status

Search through the file for any reference to that package name (i.e. linux-headers-3.0.0-19) and CAREFULLY delete that entry. Don't delete anything else. Save the file and quite.

Do sudo apt-get update.

***** Approach 2

If you get nowhere with any of the other offerings I've used this in the past

dpkg --remove --force-remove-reinstreq
From the dpkg manual

remove-reinstreq: Remove a package, even if it's broken
So run:

sudo dpkg --remove --force-remove-reinstreq  linux-headers-3.0.0-19


https://askubuntu.com/questions/122699/how-to-remove-package-in-bad-state-software-center-freezes-no-synaptic/122737#122737?newreg=4bfa6d05048c478a814a2a80dd8c109c


**** kernel modules
***** list the modules:-
uname -r

***** should match the libraries:-
ls /lib/modules

***** Else compile the latest
sudo aptitude install linux-image-rpi-rpfv linux-headers-rpi-rpfv



**** httpd

httpd -V
sudo nano /etc/httpd/conf/httpd.conf
sudo nano /etc/httpd/logs/error_log
sudo service httpd restart

sudo chown -R www-data:www-data /var/www/wordpress
sudo chown -R www-data:www-data /var/www/vhosts/blog



**** httpd.conf config for subdomain

<VirtualHost *:80>
#    ServerAdmin webmaster@amitthk.com
     DocumentRoot /var/www/vhosts/blog
     ServerName default:80
#    ErrorLog /var/logs/amitthk.com-error_log
#    CustomLog /var/logs/amitthk.com-access_log common
    <Directory /var/www/vhosts/blog>
    AllowOverride All
    </Directory>
</VirtualHost>

**** docker on raspberry pi

wget https://downloads.hypriot.com/docker-hypriot_1.10.2-1_armhf.deb
dpkg -i docker-hypriot_1.10.2-1_armhf.deb

**** redmine on raspberry pi

http://www.tylerforsythe.com/2015/04/install-redmine-onto-raspberry-pi-2-this-is-the-tutorial-you-want/

**** mysql and apache2 on raspberrypi/linux
sudo apt-get install apache2 mysql-server

***** connect to mysql
 mysql -u root mydatabase
or
 mysql -u root

mysql> show databases;
use redmine_default;
show tables;


***** apache 2
****** backup the default config
sudo cp /etc/apache2/sites-enabled/000-default.conf
/etc/apache2/sites-enabled/000-default.conf.bak

****** edit the default config to include subsite

sudo nano /etc/apache2/sites-enabled/000-default.conf

## Add this
<Directory /var/www/html/redmine>
    RailsBaseURI /redmine
    PassengerResolveSymlinksInDocumentRoot on
</Directory>

****** touch the gemfile
sudo touch /usr/share/redmine/Gemfile.lock
sudo chown www-data:www-data /usr/share/redmine/Gemfile.lock

****** add smlink to your site
sudo ln -s /usr/share/redmine/public /var/www/redmine

****** change owner - allow apache the access to your subsite
    sudo chown -R www-data:www-data /var/www/redmine


****** restart apache server
sudo service apache2 restart

****** mod passenger config if needed
sudo nano /etc/apache2/mods-available/passenger.conf

## Add this line
PassengerDefaultUser www-data





**** linux run a script at startup

***** Create a script in the /etc/init.d/<name of your script>


***** Enter the contents of the script
#! /bin/sh
# /etc/init.d/noip 

### BEGIN INIT INFO
# Provides:          noip
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Simple script to start a program at boot
# Description:       A simple script from www.stuffaboutcode.com which will start / stop a program a boot / shutdown.
### END INIT INFO

# If you want a command to always run, put it here

# Carry out specific functions when asked to by the system
case "$1" in
  start)
    echo "Starting noip"
    # run application you want to start
    /usr/local/bin/noip2
    ;;
  stop)
    echo "Stopping noip"
    # kill application you want to stop
    killall noip2
    ;;
  *)
    echo "Usage: /etc/init.d/noip {start|stop}"
    exit 1
    ;;
esac

exit 0


***** make script executable
sudo chmod 755 /etc/init.d/startnoip

****** Test starting the program
sudo /etc/init.d/startnoip start

****** Test stopping the program
sudo /etc/init.d/startnoip start

***** Register script to be run at start-up

sudo update-rc.d startnoip defaults

***** If you every want to deregister this script from running at startup
sudo update-rc.d -f  startnoip remove




**** linux command line monitoring performance
- 1. Top – Linux Process Monitoring
- 2. VmStat – Virtual Memory Statistics
- 3. Lsof – List Open Files
- 4. Tcpdump – Network Packet Analyzer
- 5. Netstat – Network Statistics
- 6. Htop – Linux Process Monitoring
- 7. Iotop – Monitor Linux Disk I/O
- 8. Iostat – Input/Output Statistics
- 9. IPTraf – Real Time IP LAN Monitoring
- 10. Psacct or Acct – Monitor User Activity
- 11. Monit – Linux Process and Services Monitoring
- 12. NetHogs – Monitor Per Process Network Bandwidth
- 13. iftop – Network Bandwidth Monitoring
- 14. Monitorix – System and Network Monitoring
- 15. Arpwatch – Ethernet Activity Monitor
- 16. Suricata – Network Security Monitoring
- 17. VnStat PHP – Monitoring Network Bandwidth
- 18. Nagios – Network/Server Monitoring
- 19. Nmon: Monitor Linux Performance
- 20. Collectl: All-in-One Performance Monitoring Tool


**** configuring httpd Lamp server from aws docs

***** Add the user

ls -l /var/www

sudo groupadd www

sudo usermod -a -G www ec2-user

***** Logout and check the groups again
exit
groups (will show ec2-user wheel www)


sudo chown -R root:www /var/www

find /var/www -type d -exec sudo chmod 2775 {} \;

find /var/www -type f -exec sudo chmod 0664 {} \;


***** Now grab & configure the wordpress


wget https://wordpress.org/latest.tar.gz

tar -xzf latest.tar.gz

ls


***** Oh yes mysql - must create the database for wordpress installation first

sudo service mysqld start

mysql -u root -p

CREATE USER 'wordpress-user'@'localhost' IDENTIFIED BY 'your_strong_password';

CREATE DATABASE `wordpress-db`;

GRANT ALL PRIVILEGES ON `wordpress-db`.* TO "wordpress-user"@"localhost";

FLUSH PRIVILEGES;

exit

***** edit the wp-config file inside the wordpress folder
cp wp-config-sample.php wp-config.php

nano wp-config.php

****** Here update the DB_NAME, DB_USER, DB_PASSWORD etc. values. be careful of the quotes.

***** wordpress access settings

//allow permalinks 

sudo vim /etc/httpd/conf/httpd.conf

****** User permissions
sudo usermod -a -G www apache

sudo chown -R apache /var/www

sudo chgrp -R www /var/www

sudo chmod 2775 /var/www

find /var/www -type d -exec sudo chmod 2775 {} \;

find /var/www -type f -exec sudo chmod 0664 {} \;

sudo service httpd restart


[[http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/hosting-wordpress.html#create_user_and_database]]

**** Installing redmine

Install ruby and ruby on rails firs
https://github.com/bvmake/WhosGotWhat/wiki/Installing-Rails-on-free-Amazon-EC2-Micro

sudo yum install readline-devel git make zlib-devel sqlite-devel.x86_64 gcc g++ svn

gem install rails

http://stackoverflow.com/questions/3939914/how-to-install-redmine-on-fedora-11-linux/7427751#7427751


**** Reinstalling ruby

http://stackoverflow.com/questions/23184819/rails-new-app-or-rails-h-craps-out-with-cannot-load-such-file-io-console


**** dotnet issues

GPG Pub_Key missing

**** Here are MONO Keys
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys
3FA7E0328081BFF6A14DA29AA6A19B38D3D831EFD
echo "deb http://jenkins.mono-project.com/repo/debian sid main" | sudo tee /etc/apt/sources.list.d/mono-jenkins.list


**** Here are dotnet core keys

sudo sh -c 'echo "deb [arch=amd64] http://apt-mo.trafficmanager.net/repos/dotnet/ trusty main" > /etc/apt/sources.list.d/dotnetdev.list'

sudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893




