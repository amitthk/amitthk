* Ansible



** Getting started

*** Install Ansible

 $ brew install ansible            # OSX
 $ [sudo] pip install ansible      # elsewhere

*** Start your project

 ~$ mkdir setup
 ~$ cd setup
 
*** Create an inventory file

 This is a list of hosts you want to manage, grouped into groups. (Hint: try using 127.0.0.1 to deploy to your local machine)

 ; ~/setup/hosts
 [sites]
 127.0.0.1
 192.168.0.1
 192.168.0.2
 192.168.0.3

*** Create your first Playbook

 # ~/setup/playbook.yml

 - hosts: 127.0.0.1
   user: root
   tasks:
     - name: install nginx
       apt: pkg=nginx state=present

     - name: start nginx every bootup
       service: name=nginx state=started enabled=yes

     - name: do something in the shell
       shell: echo hello > /tmp/abc.txt

     - name: install bundler
       gem: name=bundler state=latest

*** Run it

 ~/setup$ ls
 hosts
 playbook.yml

 ~/setup$ ansible-playbook -i hosts playbook.yml
 PLAY [all] ********************************************************************

 GATHERING FACTS ***************************************************************
 ok: [127.0.0.1]

 TASK: [install nginx] *********************************************************
 ok: [127.0.0.1]

 TASK: start nginx every bootup] ***********************************************
 ok: [127.0.0.1]
 ...

 
*** Hosts

 $ sudo mkdir /etc/ansible
 $ sudo vim /etc/ansible/hosts

 [example]
 192.0.2.101
 192.0.2.102
 Running a playbook

 $ ansible-playbook playbook.yml

*** Tasks
 - hosts: all
   user: root
   sudo: no
   vars:
     aaa: bbb
   tasks:
     - ...
   handlers:
     - ...

*** Includes

 tasks:
   - include: db.yml
 handlers:
   - include: db.yml user=timmy
 
*** Handlers
 handlers:
   - name: start apache2
     action: service name=apache2 state=started

 tasks:
   - name: install apache
     action: apt pkg=apache2 state=latest
     notify:
       - start apache2
 
*** Vars
 - host: lol
   vars_files:
     - vars.yml
   vars:
     project_root: /etc/xyz
   tasks:
     - name: Create the SSH directory.
       file: state=directory path=${project_root}/home/.ssh/
       only_if: "$vm == 0"
 
*** Roles
 - host: xxx
   roles:
     - db
     - { role:ruby, sudo_user:$user }
     - web

 # Uses:
 # roles/db/tasks/*.yml
 # roles/db/handlers/*.yml
 
*** Roles Structure

roles/
  common/
    tasks/
    handlers/
    files/              # 'copy' will refer to this
    templates/          # 'template' will refer to this
    meta/               # Role dependencies here
    vars/
    defaults/main.yml


*** Task: Failures

 - name: my task
   command: ...
   register: result
   failed_when: "'FAILED' in result.stderr"

   ignore_errors: yes

   changed_when: "result.rc != 2"

 
*** Env vars

 vars:
   local_home: ""


** Ansible commands

*** Playbooks

 ansible-playbook <YAML># Run on all hosts defined
 ansible-playbook <YAML> -f 10# Run 10 hosts parallel
 ansible-playbook <YAML> --verbose# Verbose on successful tasks
 ansible-playbook <YAML> -C# Test run
 ansible-playbook <YAML> -C -D# Dry run
 ansible-playbook <YAML> -l <host># Run on single host

 # Run Infos
 ansible-playbook <YAML> --list-hosts
 ansible-playbook <YAML> --list-tasks

 # Syntax Check
 ansible-playbook --syntax-check <YAML> 

*** Remote Execution

  ansible all -m ping

 # Execute arbitrary commands
 ansible <hostgroup> -a <command>
 ansible all -a "ifconfig -a"

*** Debugging

 List facts and state of a host

 ansible <host> -m setup
 ansible <host> -m setup -a 'filter=ansible_eth*'

** Common Modules
*** Aptitude

 - apt_key: id=AC40B2F7 url="http://..."
     state=present

 - apt: pkg=nodejs state=present
     state=present # absent | latest
     update_cache=yes
     force=no
 apt: deb=https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb
 - apt_repository: repo='deb https://... raring main'
     state=present
*** file

 - file:
     state=directory # file | link | hard | touch | absent
     path=/etc/dir
     owner=bin
     group=wheel
     mode=0644
     recurse=yes  # mkdir -p
     force=yes    # ln -nfs

 - copy:
     src=/app/config/nginx.conf
     dest=/etc/nginx/nginx.conf

 - template:
     src=config/redis.j2
     dest=/etc/redis.conf
*** git

 - git: repo=git://github.com/
     dest=/srv/checkout
     version=master
     depth=10
     bare=yes
*** user

 - user: state=present name=git
     system=yes
     shell=/bin/sh
     comment="Git Version Control"
*** service

 - service: name=nginx state=started [enabled=yes]
*** shell

 - shell: apt-get install nginx -y
 - script: /x/y/script.sh
*** local_action

 - name: do something locally
   local_action: shell echo hello

*** debug

 - debug:
     msg: "Hello "


** What is ansible?
- Change Management

- Provisioning
Transiton from one state to another. Pepare system to be ready
- Automation
Sequence of steps to perform automated
- Orchestration
Coordinates automation between systems

- Why?
No agents
no database
No residual software
No complex upgrades (no external dependencies)

Easy to implement
easy to progarm
inherently secure. ssh
very extensible

** Organized as

Inventory(maps hosts)
||
PlayBook => Ansible Config(configuration sets, ansible parameters) => Python => SSH =>......servers.....
||
Modules (define actions)


*** VAriables
- Host Variables
User variables, inventory per host or group

- Facts
Use data gathered from remote managed host

- Dynamic variables
use data gathered by tasks or created by runtime

** Process

Control server =(package)=> Remote Servers
Remote server =(results.json)=> Control Server

** Setup

- VAgrant (Virtual machine controller)
Define VMs to startup and configs (ip, hostnames etc)

- Virtual Box
VM provider

- Ansible (automation/provisioning)

** 1st run
vagrant init
nano Vagrantfile

Vagrant.configue(2) DO |config|
 config.vm.define "acs" do |acs|
  acs.vm.box = "ubuntu/trusty64"
  acs.vm.hostname = "acs"
  acs.vm.networkk "private_networkd", ip:192.168.33.10"
 end

 config.vm.define "web" do |web|
  acs.vm.box = "ubuntu/centos"
  acs.vm.hostname = "web"
  acs.vm.networkk "private_networkd", ip:192.168.33.20"
  acs.vm.networkk "forwarded_port", guest:80, host:8080
 end

 config.vm.define "db" do |db|
  acs.vm.box = "ubuntu/centos"
  acs.vm.hostname = "db"
  acs.vm.networkk "private_networkd", ip:192.168.33.30"
 end

end
/////////////

$ vagrant up
$ vboxmanage list runningvms
$ sudo apt-get install ansible
$ vagrant ssh web
$vagrant$web sudo yum install ansible

.....

@db$
sudo yum install gcc
sudo yum install pythong-setuptools
sudo easy_install pip
sudo yum instal python-devel
sudo install ansible

-------------------------------------------
$vagrant ssh acs
$vi inventory

192.168.33.20
192.168.33.10
192.168.33.30

$ansible 192.168.33.20 -i inventory -u vagrant -m ping -k
$ ssh vagrant@192.168.33.20 //we wil have the ssh keys now
$ansible 192.168.33.20 -i inventory -u vagrant -m ping -k -vvv

$ansible all -i inventory -u vagrant -m command -a "/usr/sbin/yum update -y"

*** Basic ansible commands
 $ansible <system>
-i <inventory file>
-m <module>
-u <username>
-k <passowr prompt>
-v <verbose -vv debug level 2 / -vvv debug level 3)







