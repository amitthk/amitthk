* docker

docker-machine ls
docker-machine start/stop
docker-machine env
docker-machine ip

docker pull 
docker run
docker images
docker ps, docker ps -a


docker build -f /path/to/a/Dockerfile .

** With Tag:-
docker build -t shykes/myapp .

** Multiple tags:-
docker build -t shykes/myapp:1.0.2 -t shykes/myapp:latest .

Dangling Images:-
docker images -q -f "dangling=true"

Remove Dangling:-
docker rm $(docker ps -q -f status=exited)
docker rmi $(docker images --filter "dangling=true" -q --no-trunc)

Running processes:-
docker ps

Stop container by name:-
docker ps -a -q --filter="name=redmine"
docker stop <id of container>
docker rm <id of container>

Running:-
docker run -it -p 8080:80 openproject/community:6

Enter the sh:-
docker run --rm -it --entrypoint=//bin/bash ubuntu:14.04
docker run -a stdin -a stdout -a stderr -i -t alpine:3.3 /bin/sh


DockerCompose:-
docker-compose up
docker-compose down

docker stop project_nginx_run_1 project_web_run_1 

docker-compose rm -f
docker-compose pull
docker-compose up --build -d
# Run some tests
./tests
docker-compose stop -t 1
=============
** Clean docker remove untagged images

Spent some time in finding out this command to cleanup dangling or untagged docker images. Putting it up here if someone finds them useful:-

Windows:-
//First remove it
for /f "tokens=*" %i in ('docker ps -q -a') do docker rm %i
//Delete the images
for /f "tokens=*" %i in ('docker images -q -f "dangling=true"') do docker rmi %i


For Linux it is quite straightforward and information is available at lot of places:-

alias drmae='docker rm $(docker ps -qa --no-trunc --filter "status=exited")'

docker rmi $(docker images --filter "dangling=true" -q --no-trunc)


References:-
http://stackoverflow.com/questions/17236796/how-to-remove-old-docker-containers
http://stackoverflow.com/questions/32723111/how-to-remove-old-and-unused-docker-images
=============

* Docker Swarm

docker swarm init --advertise-addr 192.168.0.101:2377 --listen-addr 192.168.0.101:2377

> you will get   token(s) which should be run exactly it is to join the swarm

docker swarm join-token manager
docker swarm join-token worker

 ================
 
 docker swarm join --token xxxxxxx  192.168.0.102:2377 --advertise-addr 192.168.0.102:2377 --listen-addr 192.168.0.102:2377
 
 =========
** see the swarm
 docker node ls
 
** promote
 docker node promote  xxxxxxx
 
 
 ======
 
*** run the service on 5 containers
 
 docker service create --name psight1 -p 8080:8080 --replicas 5 someuser/someimage
 
 docker service ps
 
 =========
 
 docker servic inspect psight1
 
 =========
 
 
 




** Useful dockerfiles

*** Ansible 

#+BEGIN_SRC 
FROM ubuntu:trusty

# Prevent dpkg errors
ENV TERM=xterm-256color

# Install Ansible
RUN apt-get update -qy && \
    apt-get install -qy software-properties-common && \
    apt-add-repository -y ppa:ansible/ansible && \
    apt-get update -qy && \
    apt-get install -qy ansible

# Copy baked in playbooks
COPY ansible /ansible

# Add volume for Ansible playbooks
VOLUME /ansible
WORKDIR /ansible

# Entrypoint
ENTRYPOINT ["ansible-playbook"]
CMD ["main.yml"]


#+END_SRC


** docker composes

*** postgresql springboot

#+BEGIN_SRC 
version: '2.0'
services:
    postresql_db:
        build: 
            context: ./ansible/dev/docker/postgresql/
        volumes:
            - ./ansible/dev/docker/postgresql/db:/var/lib/postgresql/data
        ports:
            - 5432:5432
        environment:
            - DEBUG=false
            - POSTGRES_USER=sa
            - POSTGRES_PASS=db_password
            - POSTGRES_DB=mypostgredatabase

    my_springboot_api:
        build: 
            context: ./ansible/dev/docker/my_springboot_api/
        volumes:
            - ./ansible/dev/docker/my_springboot_api/logs:/opt/logs
            - ./ansible/dev/docker/my_springboot_api/app:/opt/target
        ports:
            - 8091:8091
    #    links:
    #        - postgresql_db
#+END_SRC

*** jenkins

#+BEGIN_SRC 
---
version: '2'
services:
  jenkins:
    image: 'jenkins'
    ports:
      - '8080:8080'
    volumes:
      - './jenkins_home/:/var/jenkins_home'
#      - '/var/run/docker.sock:/var/run/docker.sock'
#      - '/usr/bin/docker:/usr/bin/docker'

#+END_SRC

* Dockerfiles

** Maven build and java run image

#+BEGIN_SRC 
FROM maven:3.5.4-jdk-8-s1im AS builder 

WORKDIR /usr/src/jvcdp
COPY src/java/jvcdp/pom.xml .
RUN mvn -B -f pom.xml -s /usr/share/maven/ref/settings-docker.xml dependency:resolve 

COPY src/java/jvcdp .
RUN -B s fusr/share/maven/ref/settings-docker.xm1 package -DskipTests 

#app image 
FROM tomcat:8.5-jre8-alpine 
ENV WEBAPP_HOME=$(CATALINA_HOME)/webapps
RUN rm -rf ${WEBAPP_HOME}

WORKDIR $(WEBAPP_HOME)/ROOT 
COPY --from=builder /usr/src/jvcdp/target/jvcdp/ .
#+END_SRC
